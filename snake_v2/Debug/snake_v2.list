
snake_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002230  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080022e8  080022e8  000122e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002328  08002328  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002328  08002328  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002328  08002328  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002328  08002328  00012328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800232c  0800232c  0001232c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000074  080023a4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  080023a4  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3ed  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c8e  00000000  00000000  0002b489  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a80  00000000  00000000  0002d118  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000988  00000000  00000000  0002db98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001501c  00000000  00000000  0002e520  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008df6  00000000  00000000  0004353c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007eef7  00000000  00000000  0004c332  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cb229  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025f8  00000000  00000000  000cb2a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000074 	.word	0x20000074
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080022d0 	.word	0x080022d0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000078 	.word	0x20000078
 80000fc:	080022d0 	.word	0x080022d0

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <__aeabi_lmul>:
 8000218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021a:	46ce      	mov	lr, r9
 800021c:	4647      	mov	r7, r8
 800021e:	0415      	lsls	r5, r2, #16
 8000220:	0c2d      	lsrs	r5, r5, #16
 8000222:	002e      	movs	r6, r5
 8000224:	b580      	push	{r7, lr}
 8000226:	0407      	lsls	r7, r0, #16
 8000228:	0c14      	lsrs	r4, r2, #16
 800022a:	0c3f      	lsrs	r7, r7, #16
 800022c:	4699      	mov	r9, r3
 800022e:	0c03      	lsrs	r3, r0, #16
 8000230:	437e      	muls	r6, r7
 8000232:	435d      	muls	r5, r3
 8000234:	4367      	muls	r7, r4
 8000236:	4363      	muls	r3, r4
 8000238:	197f      	adds	r7, r7, r5
 800023a:	0c34      	lsrs	r4, r6, #16
 800023c:	19e4      	adds	r4, r4, r7
 800023e:	469c      	mov	ip, r3
 8000240:	42a5      	cmp	r5, r4
 8000242:	d903      	bls.n	800024c <__aeabi_lmul+0x34>
 8000244:	2380      	movs	r3, #128	; 0x80
 8000246:	025b      	lsls	r3, r3, #9
 8000248:	4698      	mov	r8, r3
 800024a:	44c4      	add	ip, r8
 800024c:	464b      	mov	r3, r9
 800024e:	4343      	muls	r3, r0
 8000250:	4351      	muls	r1, r2
 8000252:	0c25      	lsrs	r5, r4, #16
 8000254:	0436      	lsls	r6, r6, #16
 8000256:	4465      	add	r5, ip
 8000258:	0c36      	lsrs	r6, r6, #16
 800025a:	0424      	lsls	r4, r4, #16
 800025c:	19a4      	adds	r4, r4, r6
 800025e:	195b      	adds	r3, r3, r5
 8000260:	1859      	adds	r1, r3, r1
 8000262:	0020      	movs	r0, r4
 8000264:	bc0c      	pop	{r2, r3}
 8000266:	4690      	mov	r8, r2
 8000268:	4699      	mov	r9, r3
 800026a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800026c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800026c:	b590      	push	{r4, r7, lr}
 800026e:	b089      	sub	sp, #36	; 0x24
 8000270:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000272:	240c      	movs	r4, #12
 8000274:	193b      	adds	r3, r7, r4
 8000276:	0018      	movs	r0, r3
 8000278:	2314      	movs	r3, #20
 800027a:	001a      	movs	r2, r3
 800027c:	2100      	movs	r1, #0
 800027e:	f001 ff71 	bl	8002164 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000282:	4b3f      	ldr	r3, [pc, #252]	; (8000380 <MX_GPIO_Init+0x114>)
 8000284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000286:	4b3e      	ldr	r3, [pc, #248]	; (8000380 <MX_GPIO_Init+0x114>)
 8000288:	2102      	movs	r1, #2
 800028a:	430a      	orrs	r2, r1
 800028c:	635a      	str	r2, [r3, #52]	; 0x34
 800028e:	4b3c      	ldr	r3, [pc, #240]	; (8000380 <MX_GPIO_Init+0x114>)
 8000290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000292:	2202      	movs	r2, #2
 8000294:	4013      	ands	r3, r2
 8000296:	60bb      	str	r3, [r7, #8]
 8000298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800029a:	4b39      	ldr	r3, [pc, #228]	; (8000380 <MX_GPIO_Init+0x114>)
 800029c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800029e:	4b38      	ldr	r3, [pc, #224]	; (8000380 <MX_GPIO_Init+0x114>)
 80002a0:	2104      	movs	r1, #4
 80002a2:	430a      	orrs	r2, r1
 80002a4:	635a      	str	r2, [r3, #52]	; 0x34
 80002a6:	4b36      	ldr	r3, [pc, #216]	; (8000380 <MX_GPIO_Init+0x114>)
 80002a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002aa:	2204      	movs	r2, #4
 80002ac:	4013      	ands	r3, r2
 80002ae:	607b      	str	r3, [r7, #4]
 80002b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b2:	4b33      	ldr	r3, [pc, #204]	; (8000380 <MX_GPIO_Init+0x114>)
 80002b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80002b6:	4b32      	ldr	r3, [pc, #200]	; (8000380 <MX_GPIO_Init+0x114>)
 80002b8:	2101      	movs	r1, #1
 80002ba:	430a      	orrs	r2, r1
 80002bc:	635a      	str	r2, [r3, #52]	; 0x34
 80002be:	4b30      	ldr	r3, [pc, #192]	; (8000380 <MX_GPIO_Init+0x114>)
 80002c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002c2:	2201      	movs	r2, #1
 80002c4:	4013      	ands	r3, r2
 80002c6:	603b      	str	r3, [r7, #0]
 80002c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WIERSZ_0_Pin|WIERSZ_1_Pin|WIERSZ_2_Pin|WIERSZ_3_Pin 
 80002ca:	492e      	ldr	r1, [pc, #184]	; (8000384 <MX_GPIO_Init+0x118>)
 80002cc:	23a0      	movs	r3, #160	; 0xa0
 80002ce:	05db      	lsls	r3, r3, #23
 80002d0:	2200      	movs	r2, #0
 80002d2:	0018      	movs	r0, r3
 80002d4:	f000 ffbe 	bl	8001254 <HAL_GPIO_WritePin>
                          |KOLUMNA_7_Pin|KOLUMNA_6_Pin|KOLUMNA_5_Pin|KOLUMNA_4_Pin 
                          |KOLUMNA_3_Pin|KOLUMNA_2_Pin|KOLUMNA_1_Pin|KOLUMNA_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB9 PB0 PB1 PB2 
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2 
 80002d8:	193b      	adds	r3, r7, r4
 80002da:	4a2b      	ldr	r2, [pc, #172]	; (8000388 <MX_GPIO_Init+0x11c>)
 80002dc:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002de:	193b      	adds	r3, r7, r4
 80002e0:	2203      	movs	r2, #3
 80002e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e4:	193b      	adds	r3, r7, r4
 80002e6:	2200      	movs	r2, #0
 80002e8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ea:	193b      	adds	r3, r7, r4
 80002ec:	4a27      	ldr	r2, [pc, #156]	; (800038c <MX_GPIO_Init+0x120>)
 80002ee:	0019      	movs	r1, r3
 80002f0:	0010      	movs	r0, r2
 80002f2:	f000 fe4b 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6;
 80002f6:	193b      	adds	r3, r7, r4
 80002f8:	4a25      	ldr	r2, [pc, #148]	; (8000390 <MX_GPIO_Init+0x124>)
 80002fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002fc:	193b      	adds	r3, r7, r4
 80002fe:	2203      	movs	r2, #3
 8000300:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000302:	193b      	adds	r3, r7, r4
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000308:	193b      	adds	r3, r7, r4
 800030a:	4a22      	ldr	r2, [pc, #136]	; (8000394 <MX_GPIO_Init+0x128>)
 800030c:	0019      	movs	r1, r3
 800030e:	0010      	movs	r0, r2
 8000310:	f000 fe3c 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = WIERSZ_0_Pin|WIERSZ_1_Pin|WIERSZ_2_Pin|WIERSZ_3_Pin 
 8000314:	193b      	adds	r3, r7, r4
 8000316:	4a1b      	ldr	r2, [pc, #108]	; (8000384 <MX_GPIO_Init+0x118>)
 8000318:	601a      	str	r2, [r3, #0]
                          |WIERSZ_4_Pin|WIERSZ_5_Pin|WIERSZ_6_Pin|WIERSZ_7_Pin 
                          |KOLUMNA_7_Pin|KOLUMNA_6_Pin|KOLUMNA_5_Pin|KOLUMNA_4_Pin 
                          |KOLUMNA_3_Pin|KOLUMNA_2_Pin|KOLUMNA_1_Pin|KOLUMNA_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031a:	193b      	adds	r3, r7, r4
 800031c:	2201      	movs	r2, #1
 800031e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000320:	193b      	adds	r3, r7, r4
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000326:	193b      	adds	r3, r7, r4
 8000328:	2200      	movs	r2, #0
 800032a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800032c:	193a      	adds	r2, r7, r4
 800032e:	23a0      	movs	r3, #160	; 0xa0
 8000330:	05db      	lsls	r3, r3, #23
 8000332:	0011      	movs	r1, r2
 8000334:	0018      	movs	r0, r3
 8000336:	f000 fe29 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = SW_START_Pin|SW_RIGHT_Pin|SW_DOWN_Pin|SW_LEFT_Pin 
 800033a:	193b      	adds	r3, r7, r4
 800033c:	22f8      	movs	r2, #248	; 0xf8
 800033e:	601a      	str	r2, [r3, #0]
                          |SW_UP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000340:	193b      	adds	r3, r7, r4
 8000342:	4a15      	ldr	r2, [pc, #84]	; (8000398 <MX_GPIO_Init+0x12c>)
 8000344:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000346:	193b      	adds	r3, r7, r4
 8000348:	2201      	movs	r2, #1
 800034a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800034c:	193b      	adds	r3, r7, r4
 800034e:	4a0f      	ldr	r2, [pc, #60]	; (800038c <MX_GPIO_Init+0x120>)
 8000350:	0019      	movs	r1, r3
 8000352:	0010      	movs	r0, r2
 8000354:	f000 fe1a 	bl	8000f8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000358:	2200      	movs	r2, #0
 800035a:	2100      	movs	r1, #0
 800035c:	2006      	movs	r0, #6
 800035e:	f000 fde3 	bl	8000f28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000362:	2006      	movs	r0, #6
 8000364:	f000 fdf5 	bl	8000f52 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000368:	2200      	movs	r2, #0
 800036a:	2100      	movs	r1, #0
 800036c:	2007      	movs	r0, #7
 800036e:	f000 fddb 	bl	8000f28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000372:	2007      	movs	r0, #7
 8000374:	f000 fded 	bl	8000f52 <HAL_NVIC_EnableIRQ>

}
 8000378:	46c0      	nop			; (mov r8, r8)
 800037a:	46bd      	mov	sp, r7
 800037c:	b009      	add	sp, #36	; 0x24
 800037e:	bd90      	pop	{r4, r7, pc}
 8000380:	40021000 	.word	0x40021000
 8000384:	0000ffff 	.word	0x0000ffff
 8000388:	00000307 	.word	0x00000307
 800038c:	50000400 	.word	0x50000400
 8000390:	0000c040 	.word	0x0000c040
 8000394:	50000800 	.word	0x50000800
 8000398:	10210000 	.word	0x10210000

0800039c <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	0002      	movs	r2, r0
 80003a4:	1dbb      	adds	r3, r7, #6
 80003a6:	801a      	strh	r2, [r3, #0]
	switch (GPIO_Pin) {
 80003a8:	1dbb      	adds	r3, r7, #6
 80003aa:	881b      	ldrh	r3, [r3, #0]
 80003ac:	2b20      	cmp	r3, #32
 80003ae:	d011      	beq.n	80003d4 <HAL_GPIO_EXTI_Falling_Callback+0x38>
 80003b0:	dc04      	bgt.n	80003bc <HAL_GPIO_EXTI_Falling_Callback+0x20>
 80003b2:	2b08      	cmp	r3, #8
 80003b4:	d01a      	beq.n	80003ec <HAL_GPIO_EXTI_Falling_Callback+0x50>
 80003b6:	2b10      	cmp	r3, #16
 80003b8:	d014      	beq.n	80003e4 <HAL_GPIO_EXTI_Falling_Callback+0x48>
		which_sw = 'd';
		break;
	case SW_START_Pin:
		break;
	}
}
 80003ba:	e018      	b.n	80003ee <HAL_GPIO_EXTI_Falling_Callback+0x52>
	switch (GPIO_Pin) {
 80003bc:	2b40      	cmp	r3, #64	; 0x40
 80003be:	d00d      	beq.n	80003dc <HAL_GPIO_EXTI_Falling_Callback+0x40>
 80003c0:	2b80      	cmp	r3, #128	; 0x80
 80003c2:	d000      	beq.n	80003c6 <HAL_GPIO_EXTI_Falling_Callback+0x2a>
}
 80003c4:	e013      	b.n	80003ee <HAL_GPIO_EXTI_Falling_Callback+0x52>
		game_over = 0;
 80003c6:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	701a      	strb	r2, [r3, #0]
		which_sw = 'w';
 80003cc:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 80003ce:	2277      	movs	r2, #119	; 0x77
 80003d0:	701a      	strb	r2, [r3, #0]
		break;
 80003d2:	e00c      	b.n	80003ee <HAL_GPIO_EXTI_Falling_Callback+0x52>
		which_sw = 's';
 80003d4:	4b09      	ldr	r3, [pc, #36]	; (80003fc <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 80003d6:	2273      	movs	r2, #115	; 0x73
 80003d8:	701a      	strb	r2, [r3, #0]
		break;
 80003da:	e008      	b.n	80003ee <HAL_GPIO_EXTI_Falling_Callback+0x52>
		which_sw = 'a';
 80003dc:	4b07      	ldr	r3, [pc, #28]	; (80003fc <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 80003de:	2261      	movs	r2, #97	; 0x61
 80003e0:	701a      	strb	r2, [r3, #0]
		break;
 80003e2:	e004      	b.n	80003ee <HAL_GPIO_EXTI_Falling_Callback+0x52>
		which_sw = 'd';
 80003e4:	4b05      	ldr	r3, [pc, #20]	; (80003fc <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 80003e6:	2264      	movs	r2, #100	; 0x64
 80003e8:	701a      	strb	r2, [r3, #0]
		break;
 80003ea:	e000      	b.n	80003ee <HAL_GPIO_EXTI_Falling_Callback+0x52>
		break;
 80003ec:	46c0      	nop			; (mov r8, r8)
}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b002      	add	sp, #8
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	20000000 	.word	0x20000000
 80003fc:	20000090 	.word	0x20000090

08000400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b0a4      	sub	sp, #144	; 0x90
 8000404:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000406:	f000 fc3d 	bl	8000c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800040a:	f000 f8a3 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800040e:	f7ff ff2d 	bl	800026c <MX_GPIO_Init>
  MX_TIM14_Init();
 8000412:	f000 fb53 	bl	8000abc <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim14);
 8000416:	4b4b      	ldr	r3, [pc, #300]	; (8000544 <main+0x144>)
 8000418:	0018      	movs	r0, r3
 800041a:	f001 fc79 	bl	8001d10 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
//		int8_t game_over = 0;

		while(game_over == 0)
 800041e:	e08a      	b.n	8000536 <main+0x136>
		{
			Snake snake;
			snake.length = 0;
 8000420:	003b      	movs	r3, r7
 8000422:	2200      	movs	r2, #0
 8000424:	701a      	strb	r2, [r3, #0]
			snake.direction = UP;
 8000426:	003b      	movs	r3, r7
 8000428:	2281      	movs	r2, #129	; 0x81
 800042a:	2173      	movs	r1, #115	; 0x73
 800042c:	5499      	strb	r1, [r3, r2]
			snake.body[0].x = 3, snake.body[0].y = 3;
 800042e:	003b      	movs	r3, r7
 8000430:	2203      	movs	r2, #3
 8000432:	705a      	strb	r2, [r3, #1]
 8000434:	003b      	movs	r3, r7
 8000436:	2203      	movs	r2, #3
 8000438:	709a      	strb	r2, [r3, #2]
			for (int i=1; i<(sizeof(snake.body)/sizeof(snake.body[0])); i++) {
 800043a:	2301      	movs	r3, #1
 800043c:	228c      	movs	r2, #140	; 0x8c
 800043e:	18ba      	adds	r2, r7, r2
 8000440:	6013      	str	r3, [r2, #0]
 8000442:	e015      	b.n	8000470 <main+0x70>
				snake.body[i].x = -1, snake.body[i].y = -1;
 8000444:	003a      	movs	r2, r7
 8000446:	218c      	movs	r1, #140	; 0x8c
 8000448:	187b      	adds	r3, r7, r1
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	005b      	lsls	r3, r3, #1
 800044e:	18d3      	adds	r3, r2, r3
 8000450:	3301      	adds	r3, #1
 8000452:	22ff      	movs	r2, #255	; 0xff
 8000454:	701a      	strb	r2, [r3, #0]
 8000456:	003a      	movs	r2, r7
 8000458:	187b      	adds	r3, r7, r1
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	005b      	lsls	r3, r3, #1
 800045e:	18d3      	adds	r3, r2, r3
 8000460:	3302      	adds	r3, #2
 8000462:	22ff      	movs	r2, #255	; 0xff
 8000464:	701a      	strb	r2, [r3, #0]
			for (int i=1; i<(sizeof(snake.body)/sizeof(snake.body[0])); i++) {
 8000466:	187b      	adds	r3, r7, r1
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	3301      	adds	r3, #1
 800046c:	187a      	adds	r2, r7, r1
 800046e:	6013      	str	r3, [r2, #0]
 8000470:	238c      	movs	r3, #140	; 0x8c
 8000472:	18fb      	adds	r3, r7, r3
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	2b3f      	cmp	r3, #63	; 0x3f
 8000478:	d9e4      	bls.n	8000444 <main+0x44>
			}

			Coord food;
			random_food(&food);
 800047a:	2384      	movs	r3, #132	; 0x84
 800047c:	18fb      	adds	r3, r7, r3
 800047e:	0018      	movs	r0, r3
 8000480:	f000 f98a 	bl	8000798 <random_food>

			int result = 0;
 8000484:	2300      	movs	r3, #0
 8000486:	2288      	movs	r2, #136	; 0x88
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	6013      	str	r3, [r2, #0]

			while (result != -1)
 800048c:	e049      	b.n	8000522 <main+0x122>
			{
				HAL_Delay(250);
 800048e:	20fa      	movs	r0, #250	; 0xfa
 8000490:	f000 fc7c 	bl	8000d8c <HAL_Delay>
				// usleep(500000); // for Unix
				// system("clear");

				// przerwanie
				 clear_display(virtual_screen);
 8000494:	4b2c      	ldr	r3, [pc, #176]	; (8000548 <main+0x148>)
 8000496:	0018      	movs	r0, r3
 8000498:	f000 f8d7 	bl	800064a <clear_display>
				 set_screen(&food, &snake);
 800049c:	003a      	movs	r2, r7
 800049e:	2384      	movs	r3, #132	; 0x84
 80004a0:	18fb      	adds	r3, r7, r3
 80004a2:	0011      	movs	r1, r2
 80004a4:	0018      	movs	r0, r3
 80004a6:	f000 f99d 	bl	80007e4 <set_screen>
				// render_screen(screen);

				// button pobierany w przerwaniu
				change_direction(&snake, which_sw);
 80004aa:	4b28      	ldr	r3, [pc, #160]	; (800054c <main+0x14c>)
 80004ac:	781a      	ldrb	r2, [r3, #0]
 80004ae:	003b      	movs	r3, r7
 80004b0:	0011      	movs	r1, r2
 80004b2:	0018      	movs	r0, r3
 80004b4:	f000 f8af 	bl	8000616 <change_direction>

				update_tail(&snake);
 80004b8:	003b      	movs	r3, r7
 80004ba:	0018      	movs	r0, r3
 80004bc:	f000 fa12 	bl	80008e4 <update_tail>

				result = move_head(&snake); // overlap check
 80004c0:	003b      	movs	r3, r7
 80004c2:	0018      	movs	r0, r3
 80004c4:	f000 f8f3 	bl	80006ae <move_head>
 80004c8:	0003      	movs	r3, r0
 80004ca:	2288      	movs	r2, #136	; 0x88
 80004cc:	18b9      	adds	r1, r7, r2
 80004ce:	600b      	str	r3, [r1, #0]
				if (result == -1) {
 80004d0:	18bb      	adds	r3, r7, r2
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	3301      	adds	r3, #1
 80004d6:	d02a      	beq.n	800052e <main+0x12e>
					break;
				}

				result = food_reached(&snake, &food); // hungry?
 80004d8:	2384      	movs	r3, #132	; 0x84
 80004da:	18fa      	adds	r2, r7, r3
 80004dc:	003b      	movs	r3, r7
 80004de:	0011      	movs	r1, r2
 80004e0:	0018      	movs	r0, r3
 80004e2:	f000 f8c8 	bl	8000676 <food_reached>
 80004e6:	0003      	movs	r3, r0
 80004e8:	2288      	movs	r2, #136	; 0x88
 80004ea:	18b9      	adds	r1, r7, r2
 80004ec:	600b      	str	r3, [r1, #0]
				if (result == 1)
 80004ee:	18bb      	adds	r3, r7, r2
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2b01      	cmp	r3, #1
 80004f4:	d10d      	bne.n	8000512 <main+0x112>
				{
					snake.length ++;
 80004f6:	003b      	movs	r3, r7
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	b25b      	sxtb	r3, r3
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	3301      	adds	r3, #1
 8000500:	b2db      	uxtb	r3, r3
 8000502:	b25a      	sxtb	r2, r3
 8000504:	003b      	movs	r3, r7
 8000506:	701a      	strb	r2, [r3, #0]
					random_food(&food);
 8000508:	2384      	movs	r3, #132	; 0x84
 800050a:	18fb      	adds	r3, r7, r3
 800050c:	0018      	movs	r0, r3
 800050e:	f000 f943 	bl	8000798 <random_food>
				}

				result = wall_hit(&snake);
 8000512:	003b      	movs	r3, r7
 8000514:	0018      	movs	r0, r3
 8000516:	f000 fa16 	bl	8000946 <wall_hit>
 800051a:	0003      	movs	r3, r0
 800051c:	2288      	movs	r2, #136	; 0x88
 800051e:	18ba      	adds	r2, r7, r2
 8000520:	6013      	str	r3, [r2, #0]
			while (result != -1)
 8000522:	2388      	movs	r3, #136	; 0x88
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	3301      	adds	r3, #1
 800052a:	d1b0      	bne.n	800048e <main+0x8e>
 800052c:	e000      	b.n	8000530 <main+0x130>
					break;
 800052e:	46c0      	nop			; (mov r8, r8)
			}

			game_over = 1;
 8000530:	4b07      	ldr	r3, [pc, #28]	; (8000550 <main+0x150>)
 8000532:	2201      	movs	r2, #1
 8000534:	701a      	strb	r2, [r3, #0]
		while(game_over == 0)
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <main+0x150>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	b25b      	sxtb	r3, r3
 800053c:	2b00      	cmp	r3, #0
 800053e:	d100      	bne.n	8000542 <main+0x142>
 8000540:	e76e      	b.n	8000420 <main+0x20>
 8000542:	e7f8      	b.n	8000536 <main+0x136>
 8000544:	200000b0 	.word	0x200000b0
 8000548:	20000094 	.word	0x20000094
 800054c:	20000090 	.word	0x20000090
 8000550:	20000000 	.word	0x20000000

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b093      	sub	sp, #76	; 0x4c
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	2414      	movs	r4, #20
 800055c:	193b      	adds	r3, r7, r4
 800055e:	0018      	movs	r0, r3
 8000560:	2334      	movs	r3, #52	; 0x34
 8000562:	001a      	movs	r2, r3
 8000564:	2100      	movs	r1, #0
 8000566:	f001 fdfd 	bl	8002164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	0018      	movs	r0, r3
 800056e:	2310      	movs	r3, #16
 8000570:	001a      	movs	r2, r3
 8000572:	2100      	movs	r1, #0
 8000574:	f001 fdf6 	bl	8002164 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000578:	2380      	movs	r3, #128	; 0x80
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	0018      	movs	r0, r3
 800057e:	f000 febb 	bl	80012f8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000582:	193b      	adds	r3, r7, r4
 8000584:	2202      	movs	r2, #2
 8000586:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	193b      	adds	r3, r7, r4
 800058a:	2280      	movs	r2, #128	; 0x80
 800058c:	0052      	lsls	r2, r2, #1
 800058e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000590:	193b      	adds	r3, r7, r4
 8000592:	2200      	movs	r2, #0
 8000594:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000596:	193b      	adds	r3, r7, r4
 8000598:	2240      	movs	r2, #64	; 0x40
 800059a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800059c:	193b      	adds	r3, r7, r4
 800059e:	2200      	movs	r2, #0
 80005a0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a2:	193b      	adds	r3, r7, r4
 80005a4:	0018      	movs	r0, r3
 80005a6:	f000 fee7 	bl	8001378 <HAL_RCC_OscConfig>
 80005aa:	1e03      	subs	r3, r0, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80005ae:	f000 f82d 	bl	800060c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2207      	movs	r2, #7
 80005b6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2200      	movs	r2, #0
 80005bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2200      	movs	r2, #0
 80005c8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2100      	movs	r1, #0
 80005ce:	0018      	movs	r0, r3
 80005d0:	f001 f9e8 	bl	80019a4 <HAL_RCC_ClockConfig>
 80005d4:	1e03      	subs	r3, r0, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80005d8:	f000 f818 	bl	800060c <Error_Handler>
  }
}
 80005dc:	46c0      	nop			; (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	b013      	add	sp, #76	; 0x4c
 80005e2:	bd90      	pop	{r4, r7, pc}

080005e4 <clear_screen>:

/* USER CODE BEGIN 4 */

void clear_screen() {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, 0x00FF, WIERSZ_OFF);
 80005e8:	23a0      	movs	r3, #160	; 0xa0
 80005ea:	05db      	lsls	r3, r3, #23
 80005ec:	2200      	movs	r2, #0
 80005ee:	21ff      	movs	r1, #255	; 0xff
 80005f0:	0018      	movs	r0, r3
 80005f2:	f000 fe2f 	bl	8001254 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, 0xFF00, KOLUMNA_OFF);
 80005f6:	23ff      	movs	r3, #255	; 0xff
 80005f8:	0219      	lsls	r1, r3, #8
 80005fa:	23a0      	movs	r3, #160	; 0xa0
 80005fc:	05db      	lsls	r3, r3, #23
 80005fe:	2201      	movs	r2, #1
 8000600:	0018      	movs	r0, r3
 8000602:	f000 fe27 	bl	8001254 <HAL_GPIO_WritePin>
}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <change_direction>:
 8000616:	b580      	push	{r7, lr}
 8000618:	b082      	sub	sp, #8
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
 800061e:	000a      	movs	r2, r1
 8000620:	1cfb      	adds	r3, r7, #3
 8000622:	701a      	strb	r2, [r3, #0]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2281      	movs	r2, #129	; 0x81
 8000628:	5c9b      	ldrb	r3, [r3, r2]
 800062a:	1cfa      	adds	r2, r7, #3
 800062c:	7812      	ldrb	r2, [r2, #0]
 800062e:	429a      	cmp	r2, r3
 8000630:	d101      	bne.n	8000636 <change_direction+0x20>
 8000632:	2300      	movs	r3, #0
 8000634:	e005      	b.n	8000642 <change_direction+0x2c>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	1cfa      	adds	r2, r7, #3
 800063a:	2181      	movs	r1, #129	; 0x81
 800063c:	7812      	ldrb	r2, [r2, #0]
 800063e:	545a      	strb	r2, [r3, r1]
 8000640:	2301      	movs	r3, #1
 8000642:	0018      	movs	r0, r3
 8000644:	46bd      	mov	sp, r7
 8000646:	b002      	add	sp, #8
 8000648:	bd80      	pop	{r7, pc}

0800064a <clear_display>:
 800064a:	b580      	push	{r7, lr}
 800064c:	b084      	sub	sp, #16
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	e007      	b.n	8000668 <clear_display+0x1e>
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	18d3      	adds	r3, r2, r3
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	3301      	adds	r3, #1
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	2b07      	cmp	r3, #7
 800066c:	ddf4      	ble.n	8000658 <clear_display+0xe>
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	b004      	add	sp, #16
 8000674:	bd80      	pop	{r7, pc}

08000676 <food_reached>:
 8000676:	b580      	push	{r7, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
 800067e:	6039      	str	r1, [r7, #0]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2201      	movs	r2, #1
 8000684:	569a      	ldrsb	r2, [r3, r2]
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	b25b      	sxtb	r3, r3
 800068c:	429a      	cmp	r2, r3
 800068e:	d109      	bne.n	80006a4 <food_reached+0x2e>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2202      	movs	r2, #2
 8000694:	569a      	ldrsb	r2, [r3, r2]
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	785b      	ldrb	r3, [r3, #1]
 800069a:	b25b      	sxtb	r3, r3
 800069c:	429a      	cmp	r2, r3
 800069e:	d101      	bne.n	80006a4 <food_reached+0x2e>
 80006a0:	2301      	movs	r3, #1
 80006a2:	e000      	b.n	80006a6 <food_reached+0x30>
 80006a4:	2300      	movs	r3, #0
 80006a6:	0018      	movs	r0, r3
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b002      	add	sp, #8
 80006ac:	bd80      	pop	{r7, pc}

080006ae <move_head>:
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2281      	movs	r2, #129	; 0x81
 80006ba:	5c9b      	ldrb	r3, [r3, r2]
 80006bc:	2b73      	cmp	r3, #115	; 0x73
 80006be:	d109      	bne.n	80006d4 <move_head+0x26>
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	785b      	ldrb	r3, [r3, #1]
 80006c4:	b25b      	sxtb	r3, r3
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	3301      	adds	r3, #1
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	b25a      	sxtb	r2, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	705a      	strb	r2, [r3, #1]
 80006d2:	e02b      	b.n	800072c <move_head+0x7e>
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2281      	movs	r2, #129	; 0x81
 80006d8:	5c9b      	ldrb	r3, [r3, r2]
 80006da:	2b77      	cmp	r3, #119	; 0x77
 80006dc:	d109      	bne.n	80006f2 <move_head+0x44>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	785b      	ldrb	r3, [r3, #1]
 80006e2:	b25b      	sxtb	r3, r3
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	3b01      	subs	r3, #1
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	b25a      	sxtb	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	705a      	strb	r2, [r3, #1]
 80006f0:	e01c      	b.n	800072c <move_head+0x7e>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2281      	movs	r2, #129	; 0x81
 80006f6:	5c9b      	ldrb	r3, [r3, r2]
 80006f8:	2b61      	cmp	r3, #97	; 0x61
 80006fa:	d109      	bne.n	8000710 <move_head+0x62>
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	789b      	ldrb	r3, [r3, #2]
 8000700:	b25b      	sxtb	r3, r3
 8000702:	b2db      	uxtb	r3, r3
 8000704:	3301      	adds	r3, #1
 8000706:	b2db      	uxtb	r3, r3
 8000708:	b25a      	sxtb	r2, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	709a      	strb	r2, [r3, #2]
 800070e:	e00d      	b.n	800072c <move_head+0x7e>
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2281      	movs	r2, #129	; 0x81
 8000714:	5c9b      	ldrb	r3, [r3, r2]
 8000716:	2b64      	cmp	r3, #100	; 0x64
 8000718:	d108      	bne.n	800072c <move_head+0x7e>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	789b      	ldrb	r3, [r3, #2]
 800071e:	b25b      	sxtb	r3, r3
 8000720:	b2db      	uxtb	r3, r3
 8000722:	3b01      	subs	r3, #1
 8000724:	b2db      	uxtb	r3, r3
 8000726:	b25a      	sxtb	r2, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	709a      	strb	r2, [r3, #2]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	0018      	movs	r0, r3
 8000730:	f000 f805 	bl	800073e <overlap_check>
 8000734:	0003      	movs	r3, r0
 8000736:	0018      	movs	r0, r3
 8000738:	46bd      	mov	sp, r7
 800073a:	b002      	add	sp, #8
 800073c:	bd80      	pop	{r7, pc}

0800073e <overlap_check>:
 800073e:	b580      	push	{r7, lr}
 8000740:	b084      	sub	sp, #16
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
 8000746:	2301      	movs	r3, #1
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	e01d      	b.n	8000788 <overlap_check+0x4a>
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	18d3      	adds	r3, r2, r3
 8000754:	3301      	adds	r3, #1
 8000756:	2200      	movs	r2, #0
 8000758:	569a      	ldrsb	r2, [r3, r2]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	785b      	ldrb	r3, [r3, #1]
 800075e:	b25b      	sxtb	r3, r3
 8000760:	429a      	cmp	r2, r3
 8000762:	d10e      	bne.n	8000782 <overlap_check+0x44>
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	18d3      	adds	r3, r2, r3
 800076c:	3302      	adds	r3, #2
 800076e:	2200      	movs	r2, #0
 8000770:	569a      	ldrsb	r2, [r3, r2]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	789b      	ldrb	r3, [r3, #2]
 8000776:	b25b      	sxtb	r3, r3
 8000778:	429a      	cmp	r2, r3
 800077a:	d102      	bne.n	8000782 <overlap_check+0x44>
 800077c:	2301      	movs	r3, #1
 800077e:	425b      	negs	r3, r3
 8000780:	e006      	b.n	8000790 <overlap_check+0x52>
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	3301      	adds	r3, #1
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2b09      	cmp	r3, #9
 800078c:	ddde      	ble.n	800074c <overlap_check+0xe>
 800078e:	2300      	movs	r3, #0
 8000790:	0018      	movs	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	b004      	add	sp, #16
 8000796:	bd80      	pop	{r7, pc}

08000798 <random_food>:
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	f001 fce8 	bl	8002174 <rand>
 80007a4:	0002      	movs	r2, r0
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <random_food+0x48>)
 80007a8:	4013      	ands	r3, r2
 80007aa:	d504      	bpl.n	80007b6 <random_food+0x1e>
 80007ac:	3b01      	subs	r3, #1
 80007ae:	2208      	movs	r2, #8
 80007b0:	4252      	negs	r2, r2
 80007b2:	4313      	orrs	r3, r2
 80007b4:	3301      	adds	r3, #1
 80007b6:	b25a      	sxtb	r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	701a      	strb	r2, [r3, #0]
 80007bc:	f001 fcda 	bl	8002174 <rand>
 80007c0:	0002      	movs	r2, r0
 80007c2:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <random_food+0x48>)
 80007c4:	4013      	ands	r3, r2
 80007c6:	d504      	bpl.n	80007d2 <random_food+0x3a>
 80007c8:	3b01      	subs	r3, #1
 80007ca:	2208      	movs	r2, #8
 80007cc:	4252      	negs	r2, r2
 80007ce:	4313      	orrs	r3, r2
 80007d0:	3301      	adds	r3, #1
 80007d2:	b25a      	sxtb	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	705a      	strb	r2, [r3, #1]
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	b002      	add	sp, #8
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	80000007 	.word	0x80000007

080007e4 <set_screen>:
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	e06e      	b.n	80008d2 <set_screen+0xee>
 80007f4:	2300      	movs	r3, #0
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	e065      	b.n	80008c6 <set_screen+0xe2>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	b25b      	sxtb	r3, r3
 8000800:	001a      	movs	r2, r3
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	4293      	cmp	r3, r2
 8000806:	d121      	bne.n	800084c <set_screen+0x68>
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	785b      	ldrb	r3, [r3, #1]
 800080c:	b25b      	sxtb	r3, r3
 800080e:	001a      	movs	r2, r3
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	4293      	cmp	r3, r2
 8000814:	d11a      	bne.n	800084c <set_screen+0x68>
 8000816:	210b      	movs	r1, #11
 8000818:	0008      	movs	r0, r1
 800081a:	187b      	adds	r3, r7, r1
 800081c:	4930      	ldr	r1, [pc, #192]	; (80008e0 <set_screen+0xfc>)
 800081e:	697a      	ldr	r2, [r7, #20]
 8000820:	188a      	adds	r2, r1, r2
 8000822:	7812      	ldrb	r2, [r2, #0]
 8000824:	701a      	strb	r2, [r3, #0]
 8000826:	2201      	movs	r2, #1
 8000828:	693b      	ldr	r3, [r7, #16]
 800082a:	409a      	lsls	r2, r3
 800082c:	0001      	movs	r1, r0
 800082e:	187b      	adds	r3, r7, r1
 8000830:	701a      	strb	r2, [r3, #0]
 8000832:	4a2b      	ldr	r2, [pc, #172]	; (80008e0 <set_screen+0xfc>)
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	18d3      	adds	r3, r2, r3
 8000838:	781a      	ldrb	r2, [r3, #0]
 800083a:	187b      	adds	r3, r7, r1
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	4313      	orrs	r3, r2
 8000840:	b2d9      	uxtb	r1, r3
 8000842:	4a27      	ldr	r2, [pc, #156]	; (80008e0 <set_screen+0xfc>)
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	18d3      	adds	r3, r2, r3
 8000848:	1c0a      	adds	r2, r1, #0
 800084a:	701a      	strb	r2, [r3, #0]
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	e033      	b.n	80008ba <set_screen+0xd6>
 8000852:	683a      	ldr	r2, [r7, #0]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	18d3      	adds	r3, r2, r3
 800085a:	3301      	adds	r3, #1
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	b25b      	sxtb	r3, r3
 8000860:	001a      	movs	r2, r3
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	4293      	cmp	r3, r2
 8000866:	d125      	bne.n	80008b4 <set_screen+0xd0>
 8000868:	683a      	ldr	r2, [r7, #0]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	18d3      	adds	r3, r2, r3
 8000870:	3302      	adds	r3, #2
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	b25b      	sxtb	r3, r3
 8000876:	001a      	movs	r2, r3
 8000878:	693b      	ldr	r3, [r7, #16]
 800087a:	4293      	cmp	r3, r2
 800087c:	d11a      	bne.n	80008b4 <set_screen+0xd0>
 800087e:	210a      	movs	r1, #10
 8000880:	0008      	movs	r0, r1
 8000882:	187b      	adds	r3, r7, r1
 8000884:	4916      	ldr	r1, [pc, #88]	; (80008e0 <set_screen+0xfc>)
 8000886:	697a      	ldr	r2, [r7, #20]
 8000888:	188a      	adds	r2, r1, r2
 800088a:	7812      	ldrb	r2, [r2, #0]
 800088c:	701a      	strb	r2, [r3, #0]
 800088e:	2201      	movs	r2, #1
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	409a      	lsls	r2, r3
 8000894:	0001      	movs	r1, r0
 8000896:	187b      	adds	r3, r7, r1
 8000898:	701a      	strb	r2, [r3, #0]
 800089a:	4a11      	ldr	r2, [pc, #68]	; (80008e0 <set_screen+0xfc>)
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	18d3      	adds	r3, r2, r3
 80008a0:	781a      	ldrb	r2, [r3, #0]
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	4313      	orrs	r3, r2
 80008a8:	b2d9      	uxtb	r1, r3
 80008aa:	4a0d      	ldr	r2, [pc, #52]	; (80008e0 <set_screen+0xfc>)
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	18d3      	adds	r3, r2, r3
 80008b0:	1c0a      	adds	r2, r1, #0
 80008b2:	701a      	strb	r2, [r3, #0]
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	3301      	adds	r3, #1
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	2b09      	cmp	r3, #9
 80008be:	ddc8      	ble.n	8000852 <set_screen+0x6e>
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	3301      	adds	r3, #1
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	2b07      	cmp	r3, #7
 80008ca:	dd96      	ble.n	80007fa <set_screen+0x16>
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	3301      	adds	r3, #1
 80008d0:	617b      	str	r3, [r7, #20]
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	2b07      	cmp	r3, #7
 80008d6:	dd8d      	ble.n	80007f4 <set_screen+0x10>
 80008d8:	46c0      	nop			; (mov r8, r8)
 80008da:	46bd      	mov	sp, r7
 80008dc:	b006      	add	sp, #24
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000094 	.word	0x20000094

080008e4 <update_tail>:
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	b25b      	sxtb	r3, r3
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	e020      	b.n	8000938 <update_tail+0x54>
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	3b01      	subs	r3, #1
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	18d3      	adds	r3, r2, r3
 8000900:	3301      	adds	r3, #1
 8000902:	2100      	movs	r1, #0
 8000904:	5659      	ldrsb	r1, [r3, r1]
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	18d3      	adds	r3, r2, r3
 800090e:	3301      	adds	r3, #1
 8000910:	1c0a      	adds	r2, r1, #0
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	3b01      	subs	r3, #1
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	18d3      	adds	r3, r2, r3
 800091e:	3302      	adds	r3, #2
 8000920:	2100      	movs	r1, #0
 8000922:	5659      	ldrsb	r1, [r3, r1]
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	18d3      	adds	r3, r2, r3
 800092c:	3302      	adds	r3, #2
 800092e:	1c0a      	adds	r2, r1, #0
 8000930:	701a      	strb	r2, [r3, #0]
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	3b01      	subs	r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2b00      	cmp	r3, #0
 800093c:	dcdb      	bgt.n	80008f6 <update_tail+0x12>
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b004      	add	sp, #16
 8000944:	bd80      	pop	{r7, pc}

08000946 <wall_hit>:
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	785b      	ldrb	r3, [r3, #1]
 8000952:	b25b      	sxtb	r3, r3
 8000954:	2b00      	cmp	r3, #0
 8000956:	db0e      	blt.n	8000976 <wall_hit+0x30>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	785b      	ldrb	r3, [r3, #1]
 800095c:	b25b      	sxtb	r3, r3
 800095e:	2b07      	cmp	r3, #7
 8000960:	dc09      	bgt.n	8000976 <wall_hit+0x30>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	789b      	ldrb	r3, [r3, #2]
 8000966:	b25b      	sxtb	r3, r3
 8000968:	2b00      	cmp	r3, #0
 800096a:	db04      	blt.n	8000976 <wall_hit+0x30>
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	789b      	ldrb	r3, [r3, #2]
 8000970:	b25b      	sxtb	r3, r3
 8000972:	2b07      	cmp	r3, #7
 8000974:	dd02      	ble.n	800097c <wall_hit+0x36>
 8000976:	2301      	movs	r3, #1
 8000978:	425b      	negs	r3, r3
 800097a:	e000      	b.n	800097e <wall_hit+0x38>
 800097c:	2300      	movs	r3, #0
 800097e:	0018      	movs	r0, r3
 8000980:	46bd      	mov	sp, r7
 8000982:	b002      	add	sp, #8
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <HAL_MspInit+0x44>)
 8000990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <HAL_MspInit+0x44>)
 8000994:	2101      	movs	r1, #1
 8000996:	430a      	orrs	r2, r1
 8000998:	641a      	str	r2, [r3, #64]	; 0x40
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <HAL_MspInit+0x44>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	2201      	movs	r2, #1
 80009a0:	4013      	ands	r3, r2
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <HAL_MspInit+0x44>)
 80009a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <HAL_MspInit+0x44>)
 80009ac:	2180      	movs	r1, #128	; 0x80
 80009ae:	0549      	lsls	r1, r1, #21
 80009b0:	430a      	orrs	r2, r1
 80009b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <HAL_MspInit+0x44>)
 80009b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009b8:	2380      	movs	r3, #128	; 0x80
 80009ba:	055b      	lsls	r3, r3, #21
 80009bc:	4013      	ands	r3, r2
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b002      	add	sp, #8
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	40021000 	.word	0x40021000

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <HardFault_Handler+0x4>

080009e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009e4:	46c0      	nop			; (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f8:	f000 f9ae 	bl	8000d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000a06:	2008      	movs	r0, #8
 8000a08:	f000 fc42 	bl	8001290 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000a16:	2010      	movs	r0, #16
 8000a18:	f000 fc3a 	bl	8001290 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000a1c:	2020      	movs	r0, #32
 8000a1e:	f000 fc37 	bl	8001290 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000a22:	2040      	movs	r0, #64	; 0x40
 8000a24:	f000 fc34 	bl	8001290 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000a28:	2080      	movs	r0, #128	; 0x80
 8000a2a:	f000 fc31 	bl	8001290 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000a38:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <TIM14_IRQHandler+0x14>)
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f001 f992 	bl	8001d64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000a40:	46c0      	nop			; (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	200000b0 	.word	0x200000b0

08000a4c <_sbrk>:
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <_sbrk+0x50>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d102      	bne.n	8000a62 <_sbrk+0x16>
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <_sbrk+0x50>)
 8000a5e:	4a10      	ldr	r2, [pc, #64]	; (8000aa0 <_sbrk+0x54>)
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <_sbrk+0x50>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <_sbrk+0x50>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	18d3      	adds	r3, r2, r3
 8000a70:	466a      	mov	r2, sp
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d907      	bls.n	8000a86 <_sbrk+0x3a>
 8000a76:	f001 fb4b 	bl	8002110 <__errno>
 8000a7a:	0003      	movs	r3, r0
 8000a7c:	220c      	movs	r2, #12
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	2301      	movs	r3, #1
 8000a82:	425b      	negs	r3, r3
 8000a84:	e006      	b.n	8000a94 <_sbrk+0x48>
 8000a86:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <_sbrk+0x50>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	18d2      	adds	r2, r2, r3
 8000a8e:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <_sbrk+0x50>)
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	0018      	movs	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b004      	add	sp, #16
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	2000009c 	.word	0x2000009c
 8000aa0:	200000f8 	.word	0x200000f8

08000aa4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <SystemInit+0x14>)
 8000aaa:	2280      	movs	r2, #128	; 0x80
 8000aac:	0512      	lsls	r2, r2, #20
 8000aae:	609a      	str	r2, [r3, #8]
#endif
}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <MX_TIM14_Init>:

TIM_HandleTypeDef htim14;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_TIM14_Init+0x40>)
 8000ac2:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <MX_TIM14_Init+0x44>)
 8000ac4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1040;
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <MX_TIM14_Init+0x40>)
 8000ac8:	2282      	movs	r2, #130	; 0x82
 8000aca:	00d2      	lsls	r2, r2, #3
 8000acc:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <MX_TIM14_Init+0x40>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_TIM14_Init+0x40>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <MX_TIM14_Init+0x40>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_TIM14_Init+0x40>)
 8000ae2:	2280      	movs	r2, #128	; 0x80
 8000ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000ae6:	4b05      	ldr	r3, [pc, #20]	; (8000afc <MX_TIM14_Init+0x40>)
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f001 f8e5 	bl	8001cb8 <HAL_TIM_Base_Init>
 8000aee:	1e03      	subs	r3, r0, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000af2:	f7ff fd8b 	bl	800060c <Error_Handler>
  }

}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	200000b0 	.word	0x200000b0
 8000b00:	40002000 	.word	0x40002000

08000b04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <HAL_TIM_Base_MspInit+0x48>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d115      	bne.n	8000b42 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <HAL_TIM_Base_MspInit+0x4c>)
 8000b18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <HAL_TIM_Base_MspInit+0x4c>)
 8000b1c:	2180      	movs	r1, #128	; 0x80
 8000b1e:	0209      	lsls	r1, r1, #8
 8000b20:	430a      	orrs	r2, r1
 8000b22:	641a      	str	r2, [r3, #64]	; 0x40
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <HAL_TIM_Base_MspInit+0x4c>)
 8000b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b28:	2380      	movs	r3, #128	; 0x80
 8000b2a:	021b      	lsls	r3, r3, #8
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2100      	movs	r1, #0
 8000b36:	2013      	movs	r0, #19
 8000b38:	f000 f9f6 	bl	8000f28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000b3c:	2013      	movs	r0, #19
 8000b3e:	f000 fa08 	bl	8000f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b004      	add	sp, #16
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	40002000 	.word	0x40002000
 8000b50:	40021000 	.word	0x40021000

08000b54 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END TIM14_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

	if (bit_kolumny < 8) {
 8000b5c:	4b30      	ldr	r3, [pc, #192]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b07      	cmp	r3, #7
 8000b62:	d853      	bhi.n	8000c0c <HAL_TIM_PeriodElapsedCallback+0xb8>

		if (bit_wiersza < 8) {
 8000b64:	4b2f      	ldr	r3, [pc, #188]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b07      	cmp	r3, #7
 8000b6a:	d83f      	bhi.n	8000bec <HAL_TIM_PeriodElapsedCallback+0x98>
			uint16_t tab_to_2nd_byte = 0;
 8000b6c:	200e      	movs	r0, #14
 8000b6e:	183b      	adds	r3, r7, r0
 8000b70:	2200      	movs	r2, #0
 8000b72:	801a      	strh	r2, [r3, #0]
			uint8_t spr = 0;
 8000b74:	240d      	movs	r4, #13
 8000b76:	193b      	adds	r3, r7, r4
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
			uint8_t przesuniecie = 0b10000000;
 8000b7c:	210c      	movs	r1, #12
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2280      	movs	r2, #128	; 0x80
 8000b82:	701a      	strb	r2, [r3, #0]

			przesuniecie = przesuniecie >> bit_wiersza;
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	4a26      	ldr	r2, [pc, #152]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000b8a:	7812      	ldrb	r2, [r2, #0]
 8000b8c:	4113      	asrs	r3, r2
 8000b8e:	001a      	movs	r2, r3
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	701a      	strb	r2, [r3, #0]
			spr = virtual_screen[bit_kolumny] & przesuniecie;
 8000b94:	4b22      	ldr	r3, [pc, #136]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	001a      	movs	r2, r3
 8000b9a:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000b9c:	5c9a      	ldrb	r2, [r3, r2]
 8000b9e:	193b      	adds	r3, r7, r4
 8000ba0:	1879      	adds	r1, r7, r1
 8000ba2:	7809      	ldrb	r1, [r1, #0]
 8000ba4:	400a      	ands	r2, r1
 8000ba6:	701a      	strb	r2, [r3, #0]

			tab_to_2nd_byte = spr << 8;
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	0004      	movs	r4, r0
 8000bb0:	183b      	adds	r3, r7, r0
 8000bb2:	0212      	lsls	r2, r2, #8
 8000bb4:	801a      	strh	r2, [r3, #0]

			clear_screen();
 8000bb6:	f7ff fd15 	bl	80005e4 <clear_screen>

			HAL_GPIO_WritePin(GPIOA, tab_to_2nd_byte, KOLUMNA_ON);
 8000bba:	0020      	movs	r0, r4
 8000bbc:	183b      	adds	r3, r7, r0
 8000bbe:	8819      	ldrh	r1, [r3, #0]
 8000bc0:	23a0      	movs	r3, #160	; 0xa0
 8000bc2:	05db      	lsls	r3, r3, #23
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f000 fb44 	bl	8001254 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, multi_wiersze, WIERSZ_ON);
 8000bcc:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b299      	uxth	r1, r3
 8000bd2:	23a0      	movs	r3, #160	; 0xa0
 8000bd4:	05db      	lsls	r3, r3, #23
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f000 fb3b 	bl	8001254 <HAL_GPIO_WritePin>

			bit_wiersza++;
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	3301      	adds	r3, #1
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000be8:	701a      	strb	r2, [r3, #0]
 8000bea:	e002      	b.n	8000bf2 <HAL_TIM_PeriodElapsedCallback+0x9e>
		} else
			bit_wiersza = 0;
 8000bec:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]

		bit_kolumny++;
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000bfc:	701a      	strb	r2, [r3, #0]
		multi_wiersze = multi_wiersze << 1;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	18db      	adds	r3, r3, r3
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000c08:	701a      	strb	r2, [r3, #0]

	} else {
		bit_kolumny = 0;
		multi_wiersze = 0x01;
	}
}
 8000c0a:	e005      	b.n	8000c18 <HAL_TIM_PeriodElapsedCallback+0xc4>
		bit_kolumny = 0;
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	701a      	strb	r2, [r3, #0]
		multi_wiersze = 0x01;
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	701a      	strb	r2, [r3, #0]
}
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b005      	add	sp, #20
 8000c1e:	bd90      	pop	{r4, r7, pc}
 8000c20:	200000a0 	.word	0x200000a0
 8000c24:	200000a1 	.word	0x200000a1
 8000c28:	20000094 	.word	0x20000094
 8000c2c:	200000ac 	.word	0x200000ac

08000c30 <Reset_Handler>:
 8000c30:	480d      	ldr	r0, [pc, #52]	; (8000c68 <LoopForever+0x2>)
 8000c32:	4685      	mov	sp, r0
 8000c34:	2100      	movs	r1, #0
 8000c36:	e003      	b.n	8000c40 <LoopCopyDataInit>

08000c38 <CopyDataInit>:
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <LoopForever+0x6>)
 8000c3a:	585b      	ldr	r3, [r3, r1]
 8000c3c:	5043      	str	r3, [r0, r1]
 8000c3e:	3104      	adds	r1, #4

08000c40 <LoopCopyDataInit>:
 8000c40:	480b      	ldr	r0, [pc, #44]	; (8000c70 <LoopForever+0xa>)
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <LoopForever+0xe>)
 8000c44:	1842      	adds	r2, r0, r1
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d3f6      	bcc.n	8000c38 <CopyDataInit>
 8000c4a:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <LoopForever+0x12>)
 8000c4c:	e002      	b.n	8000c54 <LoopFillZerobss>

08000c4e <FillZerobss>:
 8000c4e:	2300      	movs	r3, #0
 8000c50:	6013      	str	r3, [r2, #0]
 8000c52:	3204      	adds	r2, #4

08000c54 <LoopFillZerobss>:
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <LoopForever+0x16>)
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d3f9      	bcc.n	8000c4e <FillZerobss>
 8000c5a:	f7ff ff23 	bl	8000aa4 <SystemInit>
 8000c5e:	f001 fa5d 	bl	800211c <__libc_init_array>
 8000c62:	f7ff fbcd 	bl	8000400 <main>

08000c66 <LoopForever>:
 8000c66:	e7fe      	b.n	8000c66 <LoopForever>
 8000c68:	20002000 	.word	0x20002000
 8000c6c:	08002330 	.word	0x08002330
 8000c70:	20000000 	.word	0x20000000
 8000c74:	20000074 	.word	0x20000074
 8000c78:	20000074 	.word	0x20000074
 8000c7c:	200000f8 	.word	0x200000f8

08000c80 <ADC1_IRQHandler>:
 8000c80:	e7fe      	b.n	8000c80 <ADC1_IRQHandler>
	...

08000c84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c8a:	1dfb      	adds	r3, r7, #7
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HAL_Init+0x3c>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <HAL_Init+0x3c>)
 8000c96:	2180      	movs	r1, #128	; 0x80
 8000c98:	0049      	lsls	r1, r1, #1
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f000 f810 	bl	8000cc4 <HAL_InitTick>
 8000ca4:	1e03      	subs	r3, r0, #0
 8000ca6:	d003      	beq.n	8000cb0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ca8:	1dfb      	adds	r3, r7, #7
 8000caa:	2201      	movs	r2, #1
 8000cac:	701a      	strb	r2, [r3, #0]
 8000cae:	e001      	b.n	8000cb4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000cb0:	f7ff fe6a 	bl	8000988 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cb4:	1dfb      	adds	r3, r7, #7
 8000cb6:	781b      	ldrb	r3, [r3, #0]
}
 8000cb8:	0018      	movs	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b002      	add	sp, #8
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40022000 	.word	0x40022000

08000cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ccc:	230f      	movs	r3, #15
 8000cce:	18fb      	adds	r3, r7, r3
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <HAL_InitTick+0x88>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d02b      	beq.n	8000d34 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000cdc:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <HAL_InitTick+0x8c>)
 8000cde:	681c      	ldr	r4, [r3, #0]
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <HAL_InitTick+0x88>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	0019      	movs	r1, r3
 8000ce6:	23fa      	movs	r3, #250	; 0xfa
 8000ce8:	0098      	lsls	r0, r3, #2
 8000cea:	f7ff fa09 	bl	8000100 <__udivsi3>
 8000cee:	0003      	movs	r3, r0
 8000cf0:	0019      	movs	r1, r3
 8000cf2:	0020      	movs	r0, r4
 8000cf4:	f7ff fa04 	bl	8000100 <__udivsi3>
 8000cf8:	0003      	movs	r3, r0
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f000 f939 	bl	8000f72 <HAL_SYSTICK_Config>
 8000d00:	1e03      	subs	r3, r0, #0
 8000d02:	d112      	bne.n	8000d2a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b03      	cmp	r3, #3
 8000d08:	d80a      	bhi.n	8000d20 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	425b      	negs	r3, r3
 8000d10:	2200      	movs	r2, #0
 8000d12:	0018      	movs	r0, r3
 8000d14:	f000 f908 	bl	8000f28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d18:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_InitTick+0x90>)
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	e00d      	b.n	8000d3c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d20:	230f      	movs	r3, #15
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	2201      	movs	r2, #1
 8000d26:	701a      	strb	r2, [r3, #0]
 8000d28:	e008      	b.n	8000d3c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d2a:	230f      	movs	r3, #15
 8000d2c:	18fb      	adds	r3, r7, r3
 8000d2e:	2201      	movs	r2, #1
 8000d30:	701a      	strb	r2, [r3, #0]
 8000d32:	e003      	b.n	8000d3c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d34:	230f      	movs	r3, #15
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	2201      	movs	r2, #1
 8000d3a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d3c:	230f      	movs	r3, #15
 8000d3e:	18fb      	adds	r3, r7, r3
 8000d40:	781b      	ldrb	r3, [r3, #0]
}
 8000d42:	0018      	movs	r0, r3
 8000d44:	46bd      	mov	sp, r7
 8000d46:	b005      	add	sp, #20
 8000d48:	bd90      	pop	{r4, r7, pc}
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	2000000c 	.word	0x2000000c
 8000d50:	20000004 	.word	0x20000004
 8000d54:	20000008 	.word	0x20000008

08000d58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <HAL_IncTick+0x18>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <HAL_IncTick+0x1c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	18d2      	adds	r2, r2, r3
 8000d66:	4b02      	ldr	r3, [pc, #8]	; (8000d70 <HAL_IncTick+0x18>)
 8000d68:	601a      	str	r2, [r3, #0]
}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	200000f0 	.word	0x200000f0
 8000d74:	2000000c 	.word	0x2000000c

08000d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d7c:	4b02      	ldr	r3, [pc, #8]	; (8000d88 <HAL_GetTick+0x10>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
}
 8000d80:	0018      	movs	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	200000f0 	.word	0x200000f0

08000d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d94:	f7ff fff0 	bl	8000d78 <HAL_GetTick>
 8000d98:	0003      	movs	r3, r0
 8000d9a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	3301      	adds	r3, #1
 8000da4:	d004      	beq.n	8000db0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <HAL_Delay+0x40>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	18d3      	adds	r3, r2, r3
 8000dae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	f7ff ffe1 	bl	8000d78 <HAL_GetTick>
 8000db6:	0002      	movs	r2, r0
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d8f7      	bhi.n	8000db2 <HAL_Delay+0x26>
  {
  }
}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b004      	add	sp, #16
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	2000000c 	.word	0x2000000c

08000dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	0002      	movs	r2, r0
 8000dd8:	1dfb      	adds	r3, r7, #7
 8000dda:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ddc:	1dfb      	adds	r3, r7, #7
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b7f      	cmp	r3, #127	; 0x7f
 8000de2:	d809      	bhi.n	8000df8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de4:	1dfb      	adds	r3, r7, #7
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	001a      	movs	r2, r3
 8000dea:	231f      	movs	r3, #31
 8000dec:	401a      	ands	r2, r3
 8000dee:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <__NVIC_EnableIRQ+0x30>)
 8000df0:	2101      	movs	r1, #1
 8000df2:	4091      	lsls	r1, r2
 8000df4:	000a      	movs	r2, r1
 8000df6:	601a      	str	r2, [r3, #0]
  }
}
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	b002      	add	sp, #8
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	e000e100 	.word	0xe000e100

08000e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e04:	b590      	push	{r4, r7, lr}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	0002      	movs	r2, r0
 8000e0c:	6039      	str	r1, [r7, #0]
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e12:	1dfb      	adds	r3, r7, #7
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b7f      	cmp	r3, #127	; 0x7f
 8000e18:	d828      	bhi.n	8000e6c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e1a:	4a2f      	ldr	r2, [pc, #188]	; (8000ed8 <__NVIC_SetPriority+0xd4>)
 8000e1c:	1dfb      	adds	r3, r7, #7
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	b25b      	sxtb	r3, r3
 8000e22:	089b      	lsrs	r3, r3, #2
 8000e24:	33c0      	adds	r3, #192	; 0xc0
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	589b      	ldr	r3, [r3, r2]
 8000e2a:	1dfa      	adds	r2, r7, #7
 8000e2c:	7812      	ldrb	r2, [r2, #0]
 8000e2e:	0011      	movs	r1, r2
 8000e30:	2203      	movs	r2, #3
 8000e32:	400a      	ands	r2, r1
 8000e34:	00d2      	lsls	r2, r2, #3
 8000e36:	21ff      	movs	r1, #255	; 0xff
 8000e38:	4091      	lsls	r1, r2
 8000e3a:	000a      	movs	r2, r1
 8000e3c:	43d2      	mvns	r2, r2
 8000e3e:	401a      	ands	r2, r3
 8000e40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	019b      	lsls	r3, r3, #6
 8000e46:	22ff      	movs	r2, #255	; 0xff
 8000e48:	401a      	ands	r2, r3
 8000e4a:	1dfb      	adds	r3, r7, #7
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	0018      	movs	r0, r3
 8000e50:	2303      	movs	r3, #3
 8000e52:	4003      	ands	r3, r0
 8000e54:	00db      	lsls	r3, r3, #3
 8000e56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e58:	481f      	ldr	r0, [pc, #124]	; (8000ed8 <__NVIC_SetPriority+0xd4>)
 8000e5a:	1dfb      	adds	r3, r7, #7
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	b25b      	sxtb	r3, r3
 8000e60:	089b      	lsrs	r3, r3, #2
 8000e62:	430a      	orrs	r2, r1
 8000e64:	33c0      	adds	r3, #192	; 0xc0
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e6a:	e031      	b.n	8000ed0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e6c:	4a1b      	ldr	r2, [pc, #108]	; (8000edc <__NVIC_SetPriority+0xd8>)
 8000e6e:	1dfb      	adds	r3, r7, #7
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	0019      	movs	r1, r3
 8000e74:	230f      	movs	r3, #15
 8000e76:	400b      	ands	r3, r1
 8000e78:	3b08      	subs	r3, #8
 8000e7a:	089b      	lsrs	r3, r3, #2
 8000e7c:	3306      	adds	r3, #6
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	18d3      	adds	r3, r2, r3
 8000e82:	3304      	adds	r3, #4
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	1dfa      	adds	r2, r7, #7
 8000e88:	7812      	ldrb	r2, [r2, #0]
 8000e8a:	0011      	movs	r1, r2
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	400a      	ands	r2, r1
 8000e90:	00d2      	lsls	r2, r2, #3
 8000e92:	21ff      	movs	r1, #255	; 0xff
 8000e94:	4091      	lsls	r1, r2
 8000e96:	000a      	movs	r2, r1
 8000e98:	43d2      	mvns	r2, r2
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	019b      	lsls	r3, r3, #6
 8000ea2:	22ff      	movs	r2, #255	; 0xff
 8000ea4:	401a      	ands	r2, r3
 8000ea6:	1dfb      	adds	r3, r7, #7
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	0018      	movs	r0, r3
 8000eac:	2303      	movs	r3, #3
 8000eae:	4003      	ands	r3, r0
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eb4:	4809      	ldr	r0, [pc, #36]	; (8000edc <__NVIC_SetPriority+0xd8>)
 8000eb6:	1dfb      	adds	r3, r7, #7
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	001c      	movs	r4, r3
 8000ebc:	230f      	movs	r3, #15
 8000ebe:	4023      	ands	r3, r4
 8000ec0:	3b08      	subs	r3, #8
 8000ec2:	089b      	lsrs	r3, r3, #2
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	3306      	adds	r3, #6
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	18c3      	adds	r3, r0, r3
 8000ecc:	3304      	adds	r3, #4
 8000ece:	601a      	str	r2, [r3, #0]
}
 8000ed0:	46c0      	nop			; (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	b003      	add	sp, #12
 8000ed6:	bd90      	pop	{r4, r7, pc}
 8000ed8:	e000e100 	.word	0xe000e100
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	4a0c      	ldr	r2, [pc, #48]	; (8000f20 <SysTick_Config+0x40>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d901      	bls.n	8000ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e010      	b.n	8000f18 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <SysTick_Config+0x44>)
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	3a01      	subs	r2, #1
 8000efc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000efe:	2301      	movs	r3, #1
 8000f00:	425b      	negs	r3, r3
 8000f02:	2103      	movs	r1, #3
 8000f04:	0018      	movs	r0, r3
 8000f06:	f7ff ff7d 	bl	8000e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <SysTick_Config+0x44>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <SysTick_Config+0x44>)
 8000f12:	2207      	movs	r2, #7
 8000f14:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f16:	2300      	movs	r3, #0
}
 8000f18:	0018      	movs	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b002      	add	sp, #8
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	00ffffff 	.word	0x00ffffff
 8000f24:	e000e010 	.word	0xe000e010

08000f28 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	210f      	movs	r1, #15
 8000f34:	187b      	adds	r3, r7, r1
 8000f36:	1c02      	adds	r2, r0, #0
 8000f38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	187b      	adds	r3, r7, r1
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b25b      	sxtb	r3, r3
 8000f42:	0011      	movs	r1, r2
 8000f44:	0018      	movs	r0, r3
 8000f46:	f7ff ff5d 	bl	8000e04 <__NVIC_SetPriority>
}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b004      	add	sp, #16
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	0002      	movs	r2, r0
 8000f5a:	1dfb      	adds	r3, r7, #7
 8000f5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f5e:	1dfb      	adds	r3, r7, #7
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	0018      	movs	r0, r3
 8000f66:	f7ff ff33 	bl	8000dd0 <__NVIC_EnableIRQ>
}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b002      	add	sp, #8
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f7ff ffaf 	bl	8000ee0 <SysTick_Config>
 8000f82:	0003      	movs	r3, r0
}
 8000f84:	0018      	movs	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b002      	add	sp, #8
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f9a:	e147      	b.n	800122c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	4091      	lsls	r1, r2
 8000fa6:	000a      	movs	r2, r1
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d100      	bne.n	8000fb4 <HAL_GPIO_Init+0x28>
 8000fb2:	e138      	b.n	8001226 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x38>
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b12      	cmp	r3, #18
 8000fc2:	d123      	bne.n	800100c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	08da      	lsrs	r2, r3, #3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3208      	adds	r2, #8
 8000fcc:	0092      	lsls	r2, r2, #2
 8000fce:	58d3      	ldr	r3, [r2, r3]
 8000fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	2207      	movs	r2, #7
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	220f      	movs	r2, #15
 8000fdc:	409a      	lsls	r2, r3
 8000fde:	0013      	movs	r3, r2
 8000fe0:	43da      	mvns	r2, r3
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	691a      	ldr	r2, [r3, #16]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	2107      	movs	r1, #7
 8000ff0:	400b      	ands	r3, r1
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	409a      	lsls	r2, r3
 8000ff6:	0013      	movs	r3, r2
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	08da      	lsrs	r2, r3, #3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3208      	adds	r2, #8
 8001006:	0092      	lsls	r2, r2, #2
 8001008:	6939      	ldr	r1, [r7, #16]
 800100a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	2203      	movs	r2, #3
 8001018:	409a      	lsls	r2, r3
 800101a:	0013      	movs	r3, r2
 800101c:	43da      	mvns	r2, r3
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2203      	movs	r2, #3
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	409a      	lsls	r2, r3
 8001032:	0013      	movs	r3, r2
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d00b      	beq.n	8001060 <HAL_GPIO_Init+0xd4>
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b02      	cmp	r3, #2
 800104e:	d007      	beq.n	8001060 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001054:	2b11      	cmp	r3, #17
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b12      	cmp	r3, #18
 800105e:	d130      	bne.n	80010c2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	409a      	lsls	r2, r3
 800106e:	0013      	movs	r3, r2
 8001070:	43da      	mvns	r2, r3
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	68da      	ldr	r2, [r3, #12]
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	409a      	lsls	r2, r3
 8001082:	0013      	movs	r3, r2
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001096:	2201      	movs	r2, #1
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
 800109c:	0013      	movs	r3, r2
 800109e:	43da      	mvns	r2, r3
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	091b      	lsrs	r3, r3, #4
 80010ac:	2201      	movs	r2, #1
 80010ae:	401a      	ands	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	409a      	lsls	r2, r3
 80010b4:	0013      	movs	r3, r2
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	2203      	movs	r2, #3
 80010ce:	409a      	lsls	r2, r3
 80010d0:	0013      	movs	r3, r2
 80010d2:	43da      	mvns	r2, r3
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	409a      	lsls	r2, r3
 80010e4:	0013      	movs	r3, r2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	055b      	lsls	r3, r3, #21
 80010fa:	4013      	ands	r3, r2
 80010fc:	d100      	bne.n	8001100 <HAL_GPIO_Init+0x174>
 80010fe:	e092      	b.n	8001226 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001100:	4a50      	ldr	r2, [pc, #320]	; (8001244 <HAL_GPIO_Init+0x2b8>)
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	3318      	adds	r3, #24
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	589b      	ldr	r3, [r3, r2]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	2203      	movs	r2, #3
 8001112:	4013      	ands	r3, r2
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	220f      	movs	r2, #15
 8001118:	409a      	lsls	r2, r3
 800111a:	0013      	movs	r3, r2
 800111c:	43da      	mvns	r2, r3
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	23a0      	movs	r3, #160	; 0xa0
 8001128:	05db      	lsls	r3, r3, #23
 800112a:	429a      	cmp	r2, r3
 800112c:	d013      	beq.n	8001156 <HAL_GPIO_Init+0x1ca>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a45      	ldr	r2, [pc, #276]	; (8001248 <HAL_GPIO_Init+0x2bc>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d00d      	beq.n	8001152 <HAL_GPIO_Init+0x1c6>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a44      	ldr	r2, [pc, #272]	; (800124c <HAL_GPIO_Init+0x2c0>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d007      	beq.n	800114e <HAL_GPIO_Init+0x1c2>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a43      	ldr	r2, [pc, #268]	; (8001250 <HAL_GPIO_Init+0x2c4>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d101      	bne.n	800114a <HAL_GPIO_Init+0x1be>
 8001146:	2303      	movs	r3, #3
 8001148:	e006      	b.n	8001158 <HAL_GPIO_Init+0x1cc>
 800114a:	2305      	movs	r3, #5
 800114c:	e004      	b.n	8001158 <HAL_GPIO_Init+0x1cc>
 800114e:	2302      	movs	r3, #2
 8001150:	e002      	b.n	8001158 <HAL_GPIO_Init+0x1cc>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <HAL_GPIO_Init+0x1cc>
 8001156:	2300      	movs	r3, #0
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	2103      	movs	r1, #3
 800115c:	400a      	ands	r2, r1
 800115e:	00d2      	lsls	r2, r2, #3
 8001160:	4093      	lsls	r3, r2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001168:	4936      	ldr	r1, [pc, #216]	; (8001244 <HAL_GPIO_Init+0x2b8>)
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3318      	adds	r3, #24
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001176:	4a33      	ldr	r2, [pc, #204]	; (8001244 <HAL_GPIO_Init+0x2b8>)
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	58d3      	ldr	r3, [r2, r3]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	43da      	mvns	r2, r3
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	025b      	lsls	r3, r3, #9
 8001190:	4013      	ands	r3, r2
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800119c:	4929      	ldr	r1, [pc, #164]	; (8001244 <HAL_GPIO_Init+0x2b8>)
 800119e:	2280      	movs	r2, #128	; 0x80
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80011a4:	4a27      	ldr	r2, [pc, #156]	; (8001244 <HAL_GPIO_Init+0x2b8>)
 80011a6:	2384      	movs	r3, #132	; 0x84
 80011a8:	58d3      	ldr	r3, [r2, r3]
 80011aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	43da      	mvns	r2, r3
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	029b      	lsls	r3, r3, #10
 80011be:	4013      	ands	r3, r2
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011ca:	491e      	ldr	r1, [pc, #120]	; (8001244 <HAL_GPIO_Init+0x2b8>)
 80011cc:	2284      	movs	r2, #132	; 0x84
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011d2:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <HAL_GPIO_Init+0x2b8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	43da      	mvns	r2, r3
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	4013      	ands	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	035b      	lsls	r3, r3, #13
 80011ea:	4013      	ands	r3, r2
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <HAL_GPIO_Init+0x2b8>)
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <HAL_GPIO_Init+0x2b8>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	43da      	mvns	r2, r3
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	039b      	lsls	r3, r3, #14
 8001214:	4013      	ands	r3, r2
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <HAL_GPIO_Init+0x2b8>)
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	3301      	adds	r3, #1
 800122a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	40da      	lsrs	r2, r3
 8001234:	1e13      	subs	r3, r2, #0
 8001236:	d000      	beq.n	800123a <HAL_GPIO_Init+0x2ae>
 8001238:	e6b0      	b.n	8000f9c <HAL_GPIO_Init+0x10>
  }
}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	46bd      	mov	sp, r7
 800123e:	b006      	add	sp, #24
 8001240:	bd80      	pop	{r7, pc}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	40021800 	.word	0x40021800
 8001248:	50000400 	.word	0x50000400
 800124c:	50000800 	.word	0x50000800
 8001250:	50000c00 	.word	0x50000c00

08001254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	0008      	movs	r0, r1
 800125e:	0011      	movs	r1, r2
 8001260:	1cbb      	adds	r3, r7, #2
 8001262:	1c02      	adds	r2, r0, #0
 8001264:	801a      	strh	r2, [r3, #0]
 8001266:	1c7b      	adds	r3, r7, #1
 8001268:	1c0a      	adds	r2, r1, #0
 800126a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800126c:	1c7b      	adds	r3, r7, #1
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d004      	beq.n	800127e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001274:	1cbb      	adds	r3, r7, #2
 8001276:	881a      	ldrh	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800127c:	e003      	b.n	8001286 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800127e:	1cbb      	adds	r3, r7, #2
 8001280:	881a      	ldrh	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	46bd      	mov	sp, r7
 800128a:	b002      	add	sp, #8
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	0002      	movs	r2, r0
 8001298:	1dbb      	adds	r3, r7, #6
 800129a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800129c:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	1dba      	adds	r2, r7, #6
 80012a2:	8812      	ldrh	r2, [r2, #0]
 80012a4:	4013      	ands	r3, r2
 80012a6:	d008      	beq.n	80012ba <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80012a8:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80012aa:	1dba      	adds	r2, r7, #6
 80012ac:	8812      	ldrh	r2, [r2, #0]
 80012ae:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80012b0:	1dbb      	adds	r3, r7, #6
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	0018      	movs	r0, r3
 80012b6:	f000 f815 	bl	80012e4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	1dba      	adds	r2, r7, #6
 80012c0:	8812      	ldrh	r2, [r2, #0]
 80012c2:	4013      	ands	r3, r2
 80012c4:	d008      	beq.n	80012d8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80012c8:	1dba      	adds	r2, r7, #6
 80012ca:	8812      	ldrh	r2, [r2, #0]
 80012cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80012ce:	1dbb      	adds	r3, r7, #6
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	0018      	movs	r0, r3
 80012d4:	f7ff f862 	bl	800039c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80012d8:	46c0      	nop			; (mov r8, r8)
 80012da:	46bd      	mov	sp, r7
 80012dc:	b002      	add	sp, #8
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40021800 	.word	0x40021800

080012e4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	0002      	movs	r2, r0
 80012ec:	1dbb      	adds	r3, r7, #6
 80012ee:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80012f0:	46c0      	nop			; (mov r8, r8)
 80012f2:	46bd      	mov	sp, r7
 80012f4:	b002      	add	sp, #8
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a19      	ldr	r2, [pc, #100]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001306:	4013      	ands	r3, r2
 8001308:	0019      	movs	r1, r3
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	430a      	orrs	r2, r1
 8001310:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	2380      	movs	r3, #128	; 0x80
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	429a      	cmp	r2, r3
 800131a:	d11f      	bne.n	800135c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800131c:	4b14      	ldr	r3, [pc, #80]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	0013      	movs	r3, r2
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	189b      	adds	r3, r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4912      	ldr	r1, [pc, #72]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800132a:	0018      	movs	r0, r3
 800132c:	f7fe fee8 	bl	8000100 <__udivsi3>
 8001330:	0003      	movs	r3, r0
 8001332:	3301      	adds	r3, #1
 8001334:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001336:	e008      	b.n	800134a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	3b01      	subs	r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	e001      	b.n	800134a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e009      	b.n	800135e <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800134c:	695a      	ldr	r2, [r3, #20]
 800134e:	2380      	movs	r3, #128	; 0x80
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	401a      	ands	r2, r3
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	429a      	cmp	r2, r3
 800135a:	d0ed      	beq.n	8001338 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	0018      	movs	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	b004      	add	sp, #16
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	40007000 	.word	0x40007000
 800136c:	fffff9ff 	.word	0xfffff9ff
 8001370:	20000004 	.word	0x20000004
 8001374:	000f4240 	.word	0x000f4240

08001378 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e2f9      	b.n	800197e <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2201      	movs	r2, #1
 8001390:	4013      	ands	r3, r2
 8001392:	d100      	bne.n	8001396 <HAL_RCC_OscConfig+0x1e>
 8001394:	e07c      	b.n	8001490 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001396:	4bc3      	ldr	r3, [pc, #780]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	2238      	movs	r2, #56	; 0x38
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013a0:	4bc0      	ldr	r3, [pc, #768]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	2203      	movs	r2, #3
 80013a6:	4013      	ands	r3, r2
 80013a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2b10      	cmp	r3, #16
 80013ae:	d102      	bne.n	80013b6 <HAL_RCC_OscConfig+0x3e>
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	2b03      	cmp	r3, #3
 80013b4:	d002      	beq.n	80013bc <HAL_RCC_OscConfig+0x44>
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	2b08      	cmp	r3, #8
 80013ba:	d10b      	bne.n	80013d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013bc:	4bb9      	ldr	r3, [pc, #740]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	029b      	lsls	r3, r3, #10
 80013c4:	4013      	ands	r3, r2
 80013c6:	d062      	beq.n	800148e <HAL_RCC_OscConfig+0x116>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d15e      	bne.n	800148e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e2d4      	b.n	800197e <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	025b      	lsls	r3, r3, #9
 80013dc:	429a      	cmp	r2, r3
 80013de:	d107      	bne.n	80013f0 <HAL_RCC_OscConfig+0x78>
 80013e0:	4bb0      	ldr	r3, [pc, #704]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4baf      	ldr	r3, [pc, #700]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80013e6:	2180      	movs	r1, #128	; 0x80
 80013e8:	0249      	lsls	r1, r1, #9
 80013ea:	430a      	orrs	r2, r1
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	e020      	b.n	8001432 <HAL_RCC_OscConfig+0xba>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	23a0      	movs	r3, #160	; 0xa0
 80013f6:	02db      	lsls	r3, r3, #11
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d10e      	bne.n	800141a <HAL_RCC_OscConfig+0xa2>
 80013fc:	4ba9      	ldr	r3, [pc, #676]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4ba8      	ldr	r3, [pc, #672]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001402:	2180      	movs	r1, #128	; 0x80
 8001404:	02c9      	lsls	r1, r1, #11
 8001406:	430a      	orrs	r2, r1
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	4ba6      	ldr	r3, [pc, #664]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4ba5      	ldr	r3, [pc, #660]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001410:	2180      	movs	r1, #128	; 0x80
 8001412:	0249      	lsls	r1, r1, #9
 8001414:	430a      	orrs	r2, r1
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	e00b      	b.n	8001432 <HAL_RCC_OscConfig+0xba>
 800141a:	4ba2      	ldr	r3, [pc, #648]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4ba1      	ldr	r3, [pc, #644]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001420:	49a1      	ldr	r1, [pc, #644]	; (80016a8 <HAL_RCC_OscConfig+0x330>)
 8001422:	400a      	ands	r2, r1
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	4b9f      	ldr	r3, [pc, #636]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4b9e      	ldr	r3, [pc, #632]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800142c:	499f      	ldr	r1, [pc, #636]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 800142e:	400a      	ands	r2, r1
 8001430:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d014      	beq.n	8001464 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143a:	f7ff fc9d 	bl	8000d78 <HAL_GetTick>
 800143e:	0003      	movs	r3, r0
 8001440:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001444:	f7ff fc98 	bl	8000d78 <HAL_GetTick>
 8001448:	0002      	movs	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b64      	cmp	r3, #100	; 0x64
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e293      	b.n	800197e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001456:	4b93      	ldr	r3, [pc, #588]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	2380      	movs	r3, #128	; 0x80
 800145c:	029b      	lsls	r3, r3, #10
 800145e:	4013      	ands	r3, r2
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0xcc>
 8001462:	e015      	b.n	8001490 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001464:	f7ff fc88 	bl	8000d78 <HAL_GetTick>
 8001468:	0003      	movs	r3, r0
 800146a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800146e:	f7ff fc83 	bl	8000d78 <HAL_GetTick>
 8001472:	0002      	movs	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b64      	cmp	r3, #100	; 0x64
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e27e      	b.n	800197e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001480:	4b88      	ldr	r3, [pc, #544]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	029b      	lsls	r3, r3, #10
 8001488:	4013      	ands	r3, r2
 800148a:	d1f0      	bne.n	800146e <HAL_RCC_OscConfig+0xf6>
 800148c:	e000      	b.n	8001490 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800148e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2202      	movs	r2, #2
 8001496:	4013      	ands	r3, r2
 8001498:	d100      	bne.n	800149c <HAL_RCC_OscConfig+0x124>
 800149a:	e099      	b.n	80015d0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800149c:	4b81      	ldr	r3, [pc, #516]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	2238      	movs	r2, #56	; 0x38
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014a6:	4b7f      	ldr	r3, [pc, #508]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	2203      	movs	r2, #3
 80014ac:	4013      	ands	r3, r2
 80014ae:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	2b10      	cmp	r3, #16
 80014b4:	d102      	bne.n	80014bc <HAL_RCC_OscConfig+0x144>
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d002      	beq.n	80014c2 <HAL_RCC_OscConfig+0x14a>
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d135      	bne.n	800152e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014c2:	4b78      	ldr	r3, [pc, #480]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	2380      	movs	r3, #128	; 0x80
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	4013      	ands	r3, r2
 80014cc:	d005      	beq.n	80014da <HAL_RCC_OscConfig+0x162>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e251      	b.n	800197e <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014da:	4b72      	ldr	r3, [pc, #456]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	4a74      	ldr	r2, [pc, #464]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 80014e0:	4013      	ands	r3, r2
 80014e2:	0019      	movs	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	021a      	lsls	r2, r3, #8
 80014ea:	4b6e      	ldr	r3, [pc, #440]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80014ec:	430a      	orrs	r2, r1
 80014ee:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d112      	bne.n	800151c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014f6:	4b6b      	ldr	r3, [pc, #428]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a6e      	ldr	r2, [pc, #440]	; (80016b4 <HAL_RCC_OscConfig+0x33c>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	0019      	movs	r1, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691a      	ldr	r2, [r3, #16]
 8001504:	4b67      	ldr	r3, [pc, #412]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001506:	430a      	orrs	r2, r1
 8001508:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800150a:	4b66      	ldr	r3, [pc, #408]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	0adb      	lsrs	r3, r3, #11
 8001510:	2207      	movs	r2, #7
 8001512:	4013      	ands	r3, r2
 8001514:	4a68      	ldr	r2, [pc, #416]	; (80016b8 <HAL_RCC_OscConfig+0x340>)
 8001516:	40da      	lsrs	r2, r3
 8001518:	4b68      	ldr	r3, [pc, #416]	; (80016bc <HAL_RCC_OscConfig+0x344>)
 800151a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800151c:	4b68      	ldr	r3, [pc, #416]	; (80016c0 <HAL_RCC_OscConfig+0x348>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	0018      	movs	r0, r3
 8001522:	f7ff fbcf 	bl	8000cc4 <HAL_InitTick>
 8001526:	1e03      	subs	r3, r0, #0
 8001528:	d051      	beq.n	80015ce <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e227      	b.n	800197e <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d030      	beq.n	8001598 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001536:	4b5b      	ldr	r3, [pc, #364]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a5e      	ldr	r2, [pc, #376]	; (80016b4 <HAL_RCC_OscConfig+0x33c>)
 800153c:	4013      	ands	r3, r2
 800153e:	0019      	movs	r1, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691a      	ldr	r2, [r3, #16]
 8001544:	4b57      	ldr	r3, [pc, #348]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001546:	430a      	orrs	r2, r1
 8001548:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800154a:	4b56      	ldr	r3, [pc, #344]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	4b55      	ldr	r3, [pc, #340]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001550:	2180      	movs	r1, #128	; 0x80
 8001552:	0049      	lsls	r1, r1, #1
 8001554:	430a      	orrs	r2, r1
 8001556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fc0e 	bl	8000d78 <HAL_GetTick>
 800155c:	0003      	movs	r3, r0
 800155e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001562:	f7ff fc09 	bl	8000d78 <HAL_GetTick>
 8001566:	0002      	movs	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e204      	b.n	800197e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001574:	4b4b      	ldr	r3, [pc, #300]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	4013      	ands	r3, r2
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001580:	4b48      	ldr	r3, [pc, #288]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	4a4a      	ldr	r2, [pc, #296]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 8001586:	4013      	ands	r3, r2
 8001588:	0019      	movs	r1, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	021a      	lsls	r2, r3, #8
 8001590:	4b44      	ldr	r3, [pc, #272]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001592:	430a      	orrs	r2, r1
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	e01b      	b.n	80015d0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001598:	4b42      	ldr	r3, [pc, #264]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b41      	ldr	r3, [pc, #260]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800159e:	4949      	ldr	r1, [pc, #292]	; (80016c4 <HAL_RCC_OscConfig+0x34c>)
 80015a0:	400a      	ands	r2, r1
 80015a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a4:	f7ff fbe8 	bl	8000d78 <HAL_GetTick>
 80015a8:	0003      	movs	r3, r0
 80015aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ae:	f7ff fbe3 	bl	8000d78 <HAL_GetTick>
 80015b2:	0002      	movs	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e1de      	b.n	800197e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015c0:	4b38      	ldr	r3, [pc, #224]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	4013      	ands	r3, r2
 80015ca:	d1f0      	bne.n	80015ae <HAL_RCC_OscConfig+0x236>
 80015cc:	e000      	b.n	80015d0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015ce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2208      	movs	r2, #8
 80015d6:	4013      	ands	r3, r2
 80015d8:	d047      	beq.n	800166a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80015da:	4b32      	ldr	r3, [pc, #200]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2238      	movs	r2, #56	; 0x38
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b18      	cmp	r3, #24
 80015e4:	d10a      	bne.n	80015fc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80015e6:	4b2f      	ldr	r3, [pc, #188]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80015e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ea:	2202      	movs	r2, #2
 80015ec:	4013      	ands	r3, r2
 80015ee:	d03c      	beq.n	800166a <HAL_RCC_OscConfig+0x2f2>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d138      	bne.n	800166a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e1c0      	b.n	800197e <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d019      	beq.n	8001638 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001604:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001606:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001608:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800160a:	2101      	movs	r1, #1
 800160c:	430a      	orrs	r2, r1
 800160e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001610:	f7ff fbb2 	bl	8000d78 <HAL_GetTick>
 8001614:	0003      	movs	r3, r0
 8001616:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800161a:	f7ff fbad 	bl	8000d78 <HAL_GetTick>
 800161e:	0002      	movs	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e1a8      	b.n	800197e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800162c:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800162e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001630:	2202      	movs	r2, #2
 8001632:	4013      	ands	r3, r2
 8001634:	d0f1      	beq.n	800161a <HAL_RCC_OscConfig+0x2a2>
 8001636:	e018      	b.n	800166a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001638:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800163a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800163c:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800163e:	2101      	movs	r1, #1
 8001640:	438a      	bics	r2, r1
 8001642:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001644:	f7ff fb98 	bl	8000d78 <HAL_GetTick>
 8001648:	0003      	movs	r3, r0
 800164a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164e:	f7ff fb93 	bl	8000d78 <HAL_GetTick>
 8001652:	0002      	movs	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e18e      	b.n	800197e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001660:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001664:	2202      	movs	r2, #2
 8001666:	4013      	ands	r3, r2
 8001668:	d1f1      	bne.n	800164e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2204      	movs	r2, #4
 8001670:	4013      	ands	r3, r2
 8001672:	d100      	bne.n	8001676 <HAL_RCC_OscConfig+0x2fe>
 8001674:	e0c6      	b.n	8001804 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001676:	231f      	movs	r3, #31
 8001678:	18fb      	adds	r3, r7, r3
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	2238      	movs	r2, #56	; 0x38
 8001684:	4013      	ands	r3, r2
 8001686:	2b20      	cmp	r3, #32
 8001688:	d11e      	bne.n	80016c8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800168c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168e:	2202      	movs	r2, #2
 8001690:	4013      	ands	r3, r2
 8001692:	d100      	bne.n	8001696 <HAL_RCC_OscConfig+0x31e>
 8001694:	e0b6      	b.n	8001804 <HAL_RCC_OscConfig+0x48c>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d000      	beq.n	80016a0 <HAL_RCC_OscConfig+0x328>
 800169e:	e0b1      	b.n	8001804 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e16c      	b.n	800197e <HAL_RCC_OscConfig+0x606>
 80016a4:	40021000 	.word	0x40021000
 80016a8:	fffeffff 	.word	0xfffeffff
 80016ac:	fffbffff 	.word	0xfffbffff
 80016b0:	ffff80ff 	.word	0xffff80ff
 80016b4:	ffffc7ff 	.word	0xffffc7ff
 80016b8:	00f42400 	.word	0x00f42400
 80016bc:	20000004 	.word	0x20000004
 80016c0:	20000008 	.word	0x20000008
 80016c4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016c8:	4baf      	ldr	r3, [pc, #700]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 80016ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	055b      	lsls	r3, r3, #21
 80016d0:	4013      	ands	r3, r2
 80016d2:	d101      	bne.n	80016d8 <HAL_RCC_OscConfig+0x360>
 80016d4:	2301      	movs	r3, #1
 80016d6:	e000      	b.n	80016da <HAL_RCC_OscConfig+0x362>
 80016d8:	2300      	movs	r3, #0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d011      	beq.n	8001702 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80016de:	4baa      	ldr	r3, [pc, #680]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 80016e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016e2:	4ba9      	ldr	r3, [pc, #676]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 80016e4:	2180      	movs	r1, #128	; 0x80
 80016e6:	0549      	lsls	r1, r1, #21
 80016e8:	430a      	orrs	r2, r1
 80016ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80016ec:	4ba6      	ldr	r3, [pc, #664]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 80016ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	055b      	lsls	r3, r3, #21
 80016f4:	4013      	ands	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80016fa:	231f      	movs	r3, #31
 80016fc:	18fb      	adds	r3, r7, r3
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001702:	4ba2      	ldr	r3, [pc, #648]	; (800198c <HAL_RCC_OscConfig+0x614>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	2380      	movs	r3, #128	; 0x80
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4013      	ands	r3, r2
 800170c:	d11a      	bne.n	8001744 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800170e:	4b9f      	ldr	r3, [pc, #636]	; (800198c <HAL_RCC_OscConfig+0x614>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4b9e      	ldr	r3, [pc, #632]	; (800198c <HAL_RCC_OscConfig+0x614>)
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	0049      	lsls	r1, r1, #1
 8001718:	430a      	orrs	r2, r1
 800171a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800171c:	f7ff fb2c 	bl	8000d78 <HAL_GetTick>
 8001720:	0003      	movs	r3, r0
 8001722:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001726:	f7ff fb27 	bl	8000d78 <HAL_GetTick>
 800172a:	0002      	movs	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e122      	b.n	800197e <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001738:	4b94      	ldr	r3, [pc, #592]	; (800198c <HAL_RCC_OscConfig+0x614>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	2380      	movs	r3, #128	; 0x80
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4013      	ands	r3, r2
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d106      	bne.n	800175a <HAL_RCC_OscConfig+0x3e2>
 800174c:	4b8e      	ldr	r3, [pc, #568]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 800174e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001750:	4b8d      	ldr	r3, [pc, #564]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 8001752:	2101      	movs	r1, #1
 8001754:	430a      	orrs	r2, r1
 8001756:	65da      	str	r2, [r3, #92]	; 0x5c
 8001758:	e01c      	b.n	8001794 <HAL_RCC_OscConfig+0x41c>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b05      	cmp	r3, #5
 8001760:	d10c      	bne.n	800177c <HAL_RCC_OscConfig+0x404>
 8001762:	4b89      	ldr	r3, [pc, #548]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 8001764:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001766:	4b88      	ldr	r3, [pc, #544]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 8001768:	2104      	movs	r1, #4
 800176a:	430a      	orrs	r2, r1
 800176c:	65da      	str	r2, [r3, #92]	; 0x5c
 800176e:	4b86      	ldr	r3, [pc, #536]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 8001770:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001772:	4b85      	ldr	r3, [pc, #532]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 8001774:	2101      	movs	r1, #1
 8001776:	430a      	orrs	r2, r1
 8001778:	65da      	str	r2, [r3, #92]	; 0x5c
 800177a:	e00b      	b.n	8001794 <HAL_RCC_OscConfig+0x41c>
 800177c:	4b82      	ldr	r3, [pc, #520]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 800177e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001780:	4b81      	ldr	r3, [pc, #516]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 8001782:	2101      	movs	r1, #1
 8001784:	438a      	bics	r2, r1
 8001786:	65da      	str	r2, [r3, #92]	; 0x5c
 8001788:	4b7f      	ldr	r3, [pc, #508]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 800178a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800178c:	4b7e      	ldr	r3, [pc, #504]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 800178e:	2104      	movs	r1, #4
 8001790:	438a      	bics	r2, r1
 8001792:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d014      	beq.n	80017c6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179c:	f7ff faec 	bl	8000d78 <HAL_GetTick>
 80017a0:	0003      	movs	r3, r0
 80017a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017a4:	e009      	b.n	80017ba <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a6:	f7ff fae7 	bl	8000d78 <HAL_GetTick>
 80017aa:	0002      	movs	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	4a77      	ldr	r2, [pc, #476]	; (8001990 <HAL_RCC_OscConfig+0x618>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e0e1      	b.n	800197e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ba:	4b73      	ldr	r3, [pc, #460]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 80017bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017be:	2202      	movs	r2, #2
 80017c0:	4013      	ands	r3, r2
 80017c2:	d0f0      	beq.n	80017a6 <HAL_RCC_OscConfig+0x42e>
 80017c4:	e013      	b.n	80017ee <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c6:	f7ff fad7 	bl	8000d78 <HAL_GetTick>
 80017ca:	0003      	movs	r3, r0
 80017cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017ce:	e009      	b.n	80017e4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d0:	f7ff fad2 	bl	8000d78 <HAL_GetTick>
 80017d4:	0002      	movs	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	4a6d      	ldr	r2, [pc, #436]	; (8001990 <HAL_RCC_OscConfig+0x618>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e0cc      	b.n	800197e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017e4:	4b68      	ldr	r3, [pc, #416]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 80017e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e8:	2202      	movs	r2, #2
 80017ea:	4013      	ands	r3, r2
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80017ee:	231f      	movs	r3, #31
 80017f0:	18fb      	adds	r3, r7, r3
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d105      	bne.n	8001804 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80017f8:	4b63      	ldr	r3, [pc, #396]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 80017fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017fc:	4b62      	ldr	r3, [pc, #392]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 80017fe:	4965      	ldr	r1, [pc, #404]	; (8001994 <HAL_RCC_OscConfig+0x61c>)
 8001800:	400a      	ands	r2, r1
 8001802:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69db      	ldr	r3, [r3, #28]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d100      	bne.n	800180e <HAL_RCC_OscConfig+0x496>
 800180c:	e0b6      	b.n	800197c <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800180e:	4b5e      	ldr	r3, [pc, #376]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	2238      	movs	r2, #56	; 0x38
 8001814:	4013      	ands	r3, r2
 8001816:	2b10      	cmp	r3, #16
 8001818:	d100      	bne.n	800181c <HAL_RCC_OscConfig+0x4a4>
 800181a:	e07e      	b.n	800191a <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	2b02      	cmp	r3, #2
 8001822:	d153      	bne.n	80018cc <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001824:	4b58      	ldr	r3, [pc, #352]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b57      	ldr	r3, [pc, #348]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 800182a:	495b      	ldr	r1, [pc, #364]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 800182c:	400a      	ands	r2, r1
 800182e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001830:	f7ff faa2 	bl	8000d78 <HAL_GetTick>
 8001834:	0003      	movs	r3, r0
 8001836:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183a:	f7ff fa9d 	bl	8000d78 <HAL_GetTick>
 800183e:	0002      	movs	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e098      	b.n	800197e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800184c:	4b4e      	ldr	r3, [pc, #312]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	049b      	lsls	r3, r3, #18
 8001854:	4013      	ands	r3, r2
 8001856:	d1f0      	bne.n	800183a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001858:	4b4b      	ldr	r3, [pc, #300]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	4a4f      	ldr	r2, [pc, #316]	; (800199c <HAL_RCC_OscConfig+0x624>)
 800185e:	4013      	ands	r3, r2
 8001860:	0019      	movs	r1, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a1a      	ldr	r2, [r3, #32]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001870:	021b      	lsls	r3, r3, #8
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001878:	431a      	orrs	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	431a      	orrs	r2, r3
 8001880:	4b41      	ldr	r3, [pc, #260]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 8001882:	430a      	orrs	r2, r1
 8001884:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001886:	4b40      	ldr	r3, [pc, #256]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	4b3f      	ldr	r3, [pc, #252]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 800188c:	2180      	movs	r1, #128	; 0x80
 800188e:	0449      	lsls	r1, r1, #17
 8001890:	430a      	orrs	r2, r1
 8001892:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001894:	4b3c      	ldr	r3, [pc, #240]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 8001896:	68da      	ldr	r2, [r3, #12]
 8001898:	4b3b      	ldr	r3, [pc, #236]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 800189a:	2180      	movs	r1, #128	; 0x80
 800189c:	0549      	lsls	r1, r1, #21
 800189e:	430a      	orrs	r2, r1
 80018a0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a2:	f7ff fa69 	bl	8000d78 <HAL_GetTick>
 80018a6:	0003      	movs	r3, r0
 80018a8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ac:	f7ff fa64 	bl	8000d78 <HAL_GetTick>
 80018b0:	0002      	movs	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e05f      	b.n	800197e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018be:	4b32      	ldr	r3, [pc, #200]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	2380      	movs	r3, #128	; 0x80
 80018c4:	049b      	lsls	r3, r3, #18
 80018c6:	4013      	ands	r3, r2
 80018c8:	d0f0      	beq.n	80018ac <HAL_RCC_OscConfig+0x534>
 80018ca:	e057      	b.n	800197c <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018cc:	4b2e      	ldr	r3, [pc, #184]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b2d      	ldr	r3, [pc, #180]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 80018d2:	4931      	ldr	r1, [pc, #196]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80018d4:	400a      	ands	r2, r1
 80018d6:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80018d8:	4b2b      	ldr	r3, [pc, #172]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	4b2a      	ldr	r3, [pc, #168]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 80018de:	2103      	movs	r1, #3
 80018e0:	438a      	bics	r2, r1
 80018e2:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80018e4:	4b28      	ldr	r3, [pc, #160]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	4b27      	ldr	r3, [pc, #156]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 80018ea:	492d      	ldr	r1, [pc, #180]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 80018ec:	400a      	ands	r2, r1
 80018ee:	60da      	str	r2, [r3, #12]
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f0:	f7ff fa42 	bl	8000d78 <HAL_GetTick>
 80018f4:	0003      	movs	r3, r0
 80018f6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fa:	f7ff fa3d 	bl	8000d78 <HAL_GetTick>
 80018fe:	0002      	movs	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e038      	b.n	800197e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800190c:	4b1e      	ldr	r3, [pc, #120]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	049b      	lsls	r3, r3, #18
 8001914:	4013      	ands	r3, r2
 8001916:	d1f0      	bne.n	80018fa <HAL_RCC_OscConfig+0x582>
 8001918:	e030      	b.n	800197c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d101      	bne.n	8001926 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e02b      	b.n	800197e <HAL_RCC_OscConfig+0x606>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001926:	4b18      	ldr	r3, [pc, #96]	; (8001988 <HAL_RCC_OscConfig+0x610>)
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	2203      	movs	r2, #3
 8001930:	401a      	ands	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	429a      	cmp	r2, r3
 8001938:	d11e      	bne.n	8001978 <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	2270      	movs	r2, #112	; 0x70
 800193e:	401a      	ands	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001944:	429a      	cmp	r2, r3
 8001946:	d117      	bne.n	8001978 <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	23fe      	movs	r3, #254	; 0xfe
 800194c:	01db      	lsls	r3, r3, #7
 800194e:	401a      	ands	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001954:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001956:	429a      	cmp	r2, r3
 8001958:	d10e      	bne.n	8001978 <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	23f8      	movs	r3, #248	; 0xf8
 800195e:	039b      	lsls	r3, r3, #14
 8001960:	401a      	ands	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001966:	429a      	cmp	r2, r3
 8001968:	d106      	bne.n	8001978 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	0f5b      	lsrs	r3, r3, #29
 800196e:	075a      	lsls	r2, r3, #29
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001974:	429a      	cmp	r2, r3
 8001976:	d001      	beq.n	800197c <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e000      	b.n	800197e <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	0018      	movs	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	b008      	add	sp, #32
 8001984:	bd80      	pop	{r7, pc}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	40021000 	.word	0x40021000
 800198c:	40007000 	.word	0x40007000
 8001990:	00001388 	.word	0x00001388
 8001994:	efffffff 	.word	0xefffffff
 8001998:	feffffff 	.word	0xfeffffff
 800199c:	1fc1808c 	.word	0x1fc1808c
 80019a0:	effeffff 	.word	0xeffeffff

080019a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0e9      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019b8:	4b76      	ldr	r3, [pc, #472]	; (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2207      	movs	r2, #7
 80019be:	4013      	ands	r3, r2
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d91e      	bls.n	8001a04 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c6:	4b73      	ldr	r3, [pc, #460]	; (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2207      	movs	r2, #7
 80019cc:	4393      	bics	r3, r2
 80019ce:	0019      	movs	r1, r3
 80019d0:	4b70      	ldr	r3, [pc, #448]	; (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019d8:	f7ff f9ce 	bl	8000d78 <HAL_GetTick>
 80019dc:	0003      	movs	r3, r0
 80019de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019e0:	e009      	b.n	80019f6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e2:	f7ff f9c9 	bl	8000d78 <HAL_GetTick>
 80019e6:	0002      	movs	r2, r0
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	4a6a      	ldr	r2, [pc, #424]	; (8001b98 <HAL_RCC_ClockConfig+0x1f4>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e0ca      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019f6:	4b67      	ldr	r3, [pc, #412]	; (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2207      	movs	r2, #7
 80019fc:	4013      	ands	r3, r2
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d1ee      	bne.n	80019e2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2202      	movs	r2, #2
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d015      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2204      	movs	r2, #4
 8001a14:	4013      	ands	r3, r2
 8001a16:	d006      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a18:	4b60      	ldr	r3, [pc, #384]	; (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	4b5f      	ldr	r3, [pc, #380]	; (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001a1e:	21e0      	movs	r1, #224	; 0xe0
 8001a20:	01c9      	lsls	r1, r1, #7
 8001a22:	430a      	orrs	r2, r1
 8001a24:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a26:	4b5d      	ldr	r3, [pc, #372]	; (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	4a5d      	ldr	r2, [pc, #372]	; (8001ba0 <HAL_RCC_ClockConfig+0x1fc>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	0019      	movs	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	4b59      	ldr	r3, [pc, #356]	; (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001a36:	430a      	orrs	r2, r1
 8001a38:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	4013      	ands	r3, r2
 8001a42:	d057      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d107      	bne.n	8001a5c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a4c:	4b53      	ldr	r3, [pc, #332]	; (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	029b      	lsls	r3, r3, #10
 8001a54:	4013      	ands	r3, r2
 8001a56:	d12b      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e097      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d107      	bne.n	8001a74 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a64:	4b4d      	ldr	r3, [pc, #308]	; (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	049b      	lsls	r3, r3, #18
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d11f      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e08b      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d107      	bne.n	8001a8c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a7c:	4b47      	ldr	r3, [pc, #284]	; (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	4013      	ands	r3, r2
 8001a86:	d113      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e07f      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	d106      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a94:	4b41      	ldr	r3, [pc, #260]	; (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a98:	2202      	movs	r2, #2
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d108      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e074      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aa2:	4b3e      	ldr	r3, [pc, #248]	; (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d101      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e06d      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ab0:	4b3a      	ldr	r3, [pc, #232]	; (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2207      	movs	r2, #7
 8001ab6:	4393      	bics	r3, r2
 8001ab8:	0019      	movs	r1, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	4b37      	ldr	r3, [pc, #220]	; (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ac4:	f7ff f958 	bl	8000d78 <HAL_GetTick>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001acc:	e009      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ace:	f7ff f953 	bl	8000d78 <HAL_GetTick>
 8001ad2:	0002      	movs	r2, r0
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	4a2f      	ldr	r2, [pc, #188]	; (8001b98 <HAL_RCC_ClockConfig+0x1f4>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e054      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae2:	4b2e      	ldr	r3, [pc, #184]	; (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	2238      	movs	r2, #56	; 0x38
 8001ae8:	401a      	ands	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d1ec      	bne.n	8001ace <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001af4:	4b27      	ldr	r3, [pc, #156]	; (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2207      	movs	r2, #7
 8001afa:	4013      	ands	r3, r2
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d21e      	bcs.n	8001b40 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4b24      	ldr	r3, [pc, #144]	; (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2207      	movs	r2, #7
 8001b08:	4393      	bics	r3, r2
 8001b0a:	0019      	movs	r1, r3
 8001b0c:	4b21      	ldr	r3, [pc, #132]	; (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b14:	f7ff f930 	bl	8000d78 <HAL_GetTick>
 8001b18:	0003      	movs	r3, r0
 8001b1a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b1c:	e009      	b.n	8001b32 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b1e:	f7ff f92b 	bl	8000d78 <HAL_GetTick>
 8001b22:	0002      	movs	r2, r0
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	4a1b      	ldr	r2, [pc, #108]	; (8001b98 <HAL_RCC_ClockConfig+0x1f4>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e02c      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b32:	4b18      	ldr	r3, [pc, #96]	; (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2207      	movs	r2, #7
 8001b38:	4013      	ands	r3, r2
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d1ee      	bne.n	8001b1e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2204      	movs	r2, #4
 8001b46:	4013      	ands	r3, r2
 8001b48:	d009      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b4a:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	4a15      	ldr	r2, [pc, #84]	; (8001ba4 <HAL_RCC_ClockConfig+0x200>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	0019      	movs	r1, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001b5e:	f000 f829 	bl	8001bb4 <HAL_RCC_GetSysClockFreq>
 8001b62:	0001      	movs	r1, r0
 8001b64:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	220f      	movs	r2, #15
 8001b6c:	401a      	ands	r2, r3
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <HAL_RCC_ClockConfig+0x204>)
 8001b70:	0092      	lsls	r2, r2, #2
 8001b72:	58d3      	ldr	r3, [r2, r3]
 8001b74:	221f      	movs	r2, #31
 8001b76:	4013      	ands	r3, r2
 8001b78:	000a      	movs	r2, r1
 8001b7a:	40da      	lsrs	r2, r3
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_RCC_ClockConfig+0x208>)
 8001b7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_RCC_ClockConfig+0x20c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	0018      	movs	r0, r3
 8001b86:	f7ff f89d 	bl	8000cc4 <HAL_InitTick>
 8001b8a:	0003      	movs	r3, r0
}
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	b004      	add	sp, #16
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40022000 	.word	0x40022000
 8001b98:	00001388 	.word	0x00001388
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	fffff0ff 	.word	0xfffff0ff
 8001ba4:	ffff8fff 	.word	0xffff8fff
 8001ba8:	080022e8 	.word	0x080022e8
 8001bac:	20000004 	.word	0x20000004
 8001bb0:	20000008 	.word	0x20000008

08001bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001bba:	4b3c      	ldr	r3, [pc, #240]	; (8001cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2238      	movs	r2, #56	; 0x38
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d10f      	bne.n	8001be4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001bc4:	4b39      	ldr	r3, [pc, #228]	; (8001cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	0adb      	lsrs	r3, r3, #11
 8001bca:	2207      	movs	r2, #7
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2201      	movs	r2, #1
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	0013      	movs	r3, r2
 8001bd4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001bd6:	6839      	ldr	r1, [r7, #0]
 8001bd8:	4835      	ldr	r0, [pc, #212]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bda:	f7fe fa91 	bl	8000100 <__udivsi3>
 8001bde:	0003      	movs	r3, r0
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	e05d      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001be4:	4b31      	ldr	r3, [pc, #196]	; (8001cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	2238      	movs	r2, #56	; 0x38
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d102      	bne.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bf0:	4b30      	ldr	r3, [pc, #192]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	e054      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001bf6:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2238      	movs	r2, #56	; 0x38
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	2b10      	cmp	r3, #16
 8001c00:	d138      	bne.n	8001c74 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001c02:	4b2a      	ldr	r3, [pc, #168]	; (8001cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	2203      	movs	r2, #3
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c0c:	4b27      	ldr	r3, [pc, #156]	; (8001cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	2207      	movs	r2, #7
 8001c14:	4013      	ands	r3, r2
 8001c16:	3301      	adds	r3, #1
 8001c18:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d10d      	bne.n	8001c3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c20:	68b9      	ldr	r1, [r7, #8]
 8001c22:	4824      	ldr	r0, [pc, #144]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c24:	f7fe fa6c 	bl	8000100 <__udivsi3>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	0019      	movs	r1, r3
 8001c2c:	4b1f      	ldr	r3, [pc, #124]	; (8001cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	0a1b      	lsrs	r3, r3, #8
 8001c32:	227f      	movs	r2, #127	; 0x7f
 8001c34:	4013      	ands	r3, r2
 8001c36:	434b      	muls	r3, r1
 8001c38:	617b      	str	r3, [r7, #20]
        break;
 8001c3a:	e00d      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	481c      	ldr	r0, [pc, #112]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c40:	f7fe fa5e 	bl	8000100 <__udivsi3>
 8001c44:	0003      	movs	r3, r0
 8001c46:	0019      	movs	r1, r3
 8001c48:	4b18      	ldr	r3, [pc, #96]	; (8001cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	0a1b      	lsrs	r3, r3, #8
 8001c4e:	227f      	movs	r2, #127	; 0x7f
 8001c50:	4013      	ands	r3, r2
 8001c52:	434b      	muls	r3, r1
 8001c54:	617b      	str	r3, [r7, #20]
        break;
 8001c56:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001c58:	4b14      	ldr	r3, [pc, #80]	; (8001cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	0f5b      	lsrs	r3, r3, #29
 8001c5e:	2207      	movs	r2, #7
 8001c60:	4013      	ands	r3, r2
 8001c62:	3301      	adds	r3, #1
 8001c64:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	6978      	ldr	r0, [r7, #20]
 8001c6a:	f7fe fa49 	bl	8000100 <__udivsi3>
 8001c6e:	0003      	movs	r3, r0
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	e015      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001c74:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2238      	movs	r2, #56	; 0x38
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b20      	cmp	r3, #32
 8001c7e:	d103      	bne.n	8001c88 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	021b      	lsls	r3, r3, #8
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	e00b      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001c88:	4b08      	ldr	r3, [pc, #32]	; (8001cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2238      	movs	r2, #56	; 0x38
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b18      	cmp	r3, #24
 8001c92:	d103      	bne.n	8001c9c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001c94:	23fa      	movs	r3, #250	; 0xfa
 8001c96:	01db      	lsls	r3, r3, #7
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	e001      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ca0:	693b      	ldr	r3, [r7, #16]
}
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b006      	add	sp, #24
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	00f42400 	.word	0x00f42400
 8001cb4:	007a1200 	.word	0x007a1200

08001cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e01e      	b.n	8001d08 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	223d      	movs	r2, #61	; 0x3d
 8001cce:	5c9b      	ldrb	r3, [r3, r2]
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d107      	bne.n	8001ce6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	223c      	movs	r2, #60	; 0x3c
 8001cda:	2100      	movs	r1, #0
 8001cdc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f7fe ff0f 	bl	8000b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	223d      	movs	r2, #61	; 0x3d
 8001cea:	2102      	movs	r1, #2
 8001cec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	0019      	movs	r1, r3
 8001cf8:	0010      	movs	r0, r2
 8001cfa:	f000 f985 	bl	8002008 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	223d      	movs	r2, #61	; 0x3d
 8001d02:	2101      	movs	r1, #1
 8001d04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	0018      	movs	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b002      	add	sp, #8
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2101      	movs	r1, #1
 8001d24:	430a      	orrs	r2, r1
 8001d26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	4a0c      	ldr	r2, [pc, #48]	; (8001d60 <HAL_TIM_Base_Start_IT+0x50>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2b06      	cmp	r3, #6
 8001d38:	d00c      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x44>
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	025b      	lsls	r3, r3, #9
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d007      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x44>
  {
    __HAL_TIM_ENABLE(htim);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2101      	movs	r1, #1
 8001d50:	430a      	orrs	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	0018      	movs	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b004      	add	sp, #16
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	00010007 	.word	0x00010007

08001d64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	2202      	movs	r2, #2
 8001d74:	4013      	ands	r3, r2
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d124      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	2202      	movs	r2, #2
 8001d82:	4013      	ands	r3, r2
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d11d      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	4252      	negs	r2, r2
 8001d90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	2203      	movs	r2, #3
 8001da0:	4013      	ands	r3, r2
 8001da2:	d004      	beq.n	8001dae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	0018      	movs	r0, r3
 8001da8:	f000 f916 	bl	8001fd8 <HAL_TIM_IC_CaptureCallback>
 8001dac:	e007      	b.n	8001dbe <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	0018      	movs	r0, r3
 8001db2:	f000 f909 	bl	8001fc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	0018      	movs	r0, r3
 8001dba:	f000 f915 	bl	8001fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	2204      	movs	r2, #4
 8001dcc:	4013      	ands	r3, r2
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d125      	bne.n	8001e1e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	2204      	movs	r2, #4
 8001dda:	4013      	ands	r3, r2
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d11e      	bne.n	8001e1e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2205      	movs	r2, #5
 8001de6:	4252      	negs	r2, r2
 8001de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2202      	movs	r2, #2
 8001dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	699a      	ldr	r2, [r3, #24]
 8001df6:	23c0      	movs	r3, #192	; 0xc0
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d004      	beq.n	8001e08 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	0018      	movs	r0, r3
 8001e02:	f000 f8e9 	bl	8001fd8 <HAL_TIM_IC_CaptureCallback>
 8001e06:	e007      	b.n	8001e18 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f000 f8dc 	bl	8001fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	0018      	movs	r0, r3
 8001e14:	f000 f8e8 	bl	8001fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	2208      	movs	r2, #8
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d124      	bne.n	8001e76 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	2208      	movs	r2, #8
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d11d      	bne.n	8001e76 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2209      	movs	r2, #9
 8001e40:	4252      	negs	r2, r2
 8001e42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2204      	movs	r2, #4
 8001e48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	2203      	movs	r2, #3
 8001e52:	4013      	ands	r3, r2
 8001e54:	d004      	beq.n	8001e60 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	0018      	movs	r0, r3
 8001e5a:	f000 f8bd 	bl	8001fd8 <HAL_TIM_IC_CaptureCallback>
 8001e5e:	e007      	b.n	8001e70 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	0018      	movs	r0, r3
 8001e64:	f000 f8b0 	bl	8001fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f000 f8bc 	bl	8001fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	2210      	movs	r2, #16
 8001e7e:	4013      	ands	r3, r2
 8001e80:	2b10      	cmp	r3, #16
 8001e82:	d125      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2210      	movs	r2, #16
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	2b10      	cmp	r3, #16
 8001e90:	d11e      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2211      	movs	r2, #17
 8001e98:	4252      	negs	r2, r2
 8001e9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2208      	movs	r2, #8
 8001ea0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	69da      	ldr	r2, [r3, #28]
 8001ea8:	23c0      	movs	r3, #192	; 0xc0
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4013      	ands	r3, r2
 8001eae:	d004      	beq.n	8001eba <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f000 f890 	bl	8001fd8 <HAL_TIM_IC_CaptureCallback>
 8001eb8:	e007      	b.n	8001eca <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f000 f883 	bl	8001fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f000 f88f 	bl	8001fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d10f      	bne.n	8001efe <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d108      	bne.n	8001efe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	4252      	negs	r2, r2
 8001ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f7fe fe2b 	bl	8000b54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	2280      	movs	r2, #128	; 0x80
 8001f06:	4013      	ands	r3, r2
 8001f08:	2b80      	cmp	r3, #128	; 0x80
 8001f0a:	d10f      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	2280      	movs	r2, #128	; 0x80
 8001f14:	4013      	ands	r3, r2
 8001f16:	2b80      	cmp	r3, #128	; 0x80
 8001f18:	d108      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2281      	movs	r2, #129	; 0x81
 8001f20:	4252      	negs	r2, r2
 8001f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	0018      	movs	r0, r3
 8001f28:	f000 f8e2 	bl	80020f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691a      	ldr	r2, [r3, #16]
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	401a      	ands	r2, r3
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d10e      	bne.n	8001f5e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2280      	movs	r2, #128	; 0x80
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b80      	cmp	r3, #128	; 0x80
 8001f4c:	d107      	bne.n	8001f5e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a1c      	ldr	r2, [pc, #112]	; (8001fc4 <HAL_TIM_IRQHandler+0x260>)
 8001f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f000 f8d1 	bl	8002100 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	2240      	movs	r2, #64	; 0x40
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b40      	cmp	r3, #64	; 0x40
 8001f6a:	d10f      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	2240      	movs	r2, #64	; 0x40
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b40      	cmp	r3, #64	; 0x40
 8001f78:	d108      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2241      	movs	r2, #65	; 0x41
 8001f80:	4252      	negs	r2, r2
 8001f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	0018      	movs	r0, r3
 8001f88:	f000 f836 	bl	8001ff8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	2220      	movs	r2, #32
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b20      	cmp	r3, #32
 8001f98:	d10f      	bne.n	8001fba <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b20      	cmp	r3, #32
 8001fa6:	d108      	bne.n	8001fba <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2221      	movs	r2, #33	; 0x21
 8001fae:	4252      	negs	r2, r2
 8001fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f000 f893 	bl	80020e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	b002      	add	sp, #8
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	fffffeff 	.word	0xfffffeff

08001fc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fd0:	46c0      	nop			; (mov r8, r8)
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	b002      	add	sp, #8
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fe0:	46c0      	nop			; (mov r8, r8)
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	b002      	add	sp, #8
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ff0:	46c0      	nop			; (mov r8, r8)
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	b002      	add	sp, #8
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002000:	46c0      	nop			; (mov r8, r8)
 8002002:	46bd      	mov	sp, r7
 8002004:	b002      	add	sp, #8
 8002006:	bd80      	pop	{r7, pc}

08002008 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a2b      	ldr	r2, [pc, #172]	; (80020c8 <TIM_Base_SetConfig+0xc0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d003      	beq.n	8002028 <TIM_Base_SetConfig+0x20>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a2a      	ldr	r2, [pc, #168]	; (80020cc <TIM_Base_SetConfig+0xc4>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d108      	bne.n	800203a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2270      	movs	r2, #112	; 0x70
 800202c:	4393      	bics	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a22      	ldr	r2, [pc, #136]	; (80020c8 <TIM_Base_SetConfig+0xc0>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d00f      	beq.n	8002062 <TIM_Base_SetConfig+0x5a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a21      	ldr	r2, [pc, #132]	; (80020cc <TIM_Base_SetConfig+0xc4>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00b      	beq.n	8002062 <TIM_Base_SetConfig+0x5a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a20      	ldr	r2, [pc, #128]	; (80020d0 <TIM_Base_SetConfig+0xc8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d007      	beq.n	8002062 <TIM_Base_SetConfig+0x5a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a1f      	ldr	r2, [pc, #124]	; (80020d4 <TIM_Base_SetConfig+0xcc>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d003      	beq.n	8002062 <TIM_Base_SetConfig+0x5a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a1e      	ldr	r2, [pc, #120]	; (80020d8 <TIM_Base_SetConfig+0xd0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d108      	bne.n	8002074 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	4a1d      	ldr	r2, [pc, #116]	; (80020dc <TIM_Base_SetConfig+0xd4>)
 8002066:	4013      	ands	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	4313      	orrs	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2280      	movs	r2, #128	; 0x80
 8002078:	4393      	bics	r3, r2
 800207a:	001a      	movs	r2, r3
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	4313      	orrs	r3, r2
 8002082:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <TIM_Base_SetConfig+0xc0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d007      	beq.n	80020b2 <TIM_Base_SetConfig+0xaa>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a0b      	ldr	r2, [pc, #44]	; (80020d4 <TIM_Base_SetConfig+0xcc>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d003      	beq.n	80020b2 <TIM_Base_SetConfig+0xaa>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <TIM_Base_SetConfig+0xd0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d103      	bne.n	80020ba <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	691a      	ldr	r2, [r3, #16]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	615a      	str	r2, [r3, #20]
}
 80020c0:	46c0      	nop			; (mov r8, r8)
 80020c2:	46bd      	mov	sp, r7
 80020c4:	b004      	add	sp, #16
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40012c00 	.word	0x40012c00
 80020cc:	40000400 	.word	0x40000400
 80020d0:	40002000 	.word	0x40002000
 80020d4:	40014400 	.word	0x40014400
 80020d8:	40014800 	.word	0x40014800
 80020dc:	fffffcff 	.word	0xfffffcff

080020e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020e8:	46c0      	nop			; (mov r8, r8)
 80020ea:	46bd      	mov	sp, r7
 80020ec:	b002      	add	sp, #8
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020f8:	46c0      	nop			; (mov r8, r8)
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b002      	add	sp, #8
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002108:	46c0      	nop			; (mov r8, r8)
 800210a:	46bd      	mov	sp, r7
 800210c:	b002      	add	sp, #8
 800210e:	bd80      	pop	{r7, pc}

08002110 <__errno>:
 8002110:	4b01      	ldr	r3, [pc, #4]	; (8002118 <__errno+0x8>)
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	4770      	bx	lr
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	20000010 	.word	0x20000010

0800211c <__libc_init_array>:
 800211c:	b570      	push	{r4, r5, r6, lr}
 800211e:	2600      	movs	r6, #0
 8002120:	4d0c      	ldr	r5, [pc, #48]	; (8002154 <__libc_init_array+0x38>)
 8002122:	4c0d      	ldr	r4, [pc, #52]	; (8002158 <__libc_init_array+0x3c>)
 8002124:	1b64      	subs	r4, r4, r5
 8002126:	10a4      	asrs	r4, r4, #2
 8002128:	42a6      	cmp	r6, r4
 800212a:	d109      	bne.n	8002140 <__libc_init_array+0x24>
 800212c:	2600      	movs	r6, #0
 800212e:	f000 f8cf 	bl	80022d0 <_init>
 8002132:	4d0a      	ldr	r5, [pc, #40]	; (800215c <__libc_init_array+0x40>)
 8002134:	4c0a      	ldr	r4, [pc, #40]	; (8002160 <__libc_init_array+0x44>)
 8002136:	1b64      	subs	r4, r4, r5
 8002138:	10a4      	asrs	r4, r4, #2
 800213a:	42a6      	cmp	r6, r4
 800213c:	d105      	bne.n	800214a <__libc_init_array+0x2e>
 800213e:	bd70      	pop	{r4, r5, r6, pc}
 8002140:	00b3      	lsls	r3, r6, #2
 8002142:	58eb      	ldr	r3, [r5, r3]
 8002144:	4798      	blx	r3
 8002146:	3601      	adds	r6, #1
 8002148:	e7ee      	b.n	8002128 <__libc_init_array+0xc>
 800214a:	00b3      	lsls	r3, r6, #2
 800214c:	58eb      	ldr	r3, [r5, r3]
 800214e:	4798      	blx	r3
 8002150:	3601      	adds	r6, #1
 8002152:	e7f2      	b.n	800213a <__libc_init_array+0x1e>
 8002154:	08002328 	.word	0x08002328
 8002158:	08002328 	.word	0x08002328
 800215c:	08002328 	.word	0x08002328
 8002160:	0800232c 	.word	0x0800232c

08002164 <memset>:
 8002164:	0003      	movs	r3, r0
 8002166:	1812      	adds	r2, r2, r0
 8002168:	4293      	cmp	r3, r2
 800216a:	d100      	bne.n	800216e <memset+0xa>
 800216c:	4770      	bx	lr
 800216e:	7019      	strb	r1, [r3, #0]
 8002170:	3301      	adds	r3, #1
 8002172:	e7f9      	b.n	8002168 <memset+0x4>

08002174 <rand>:
 8002174:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <rand+0x4c>)
 8002176:	b510      	push	{r4, lr}
 8002178:	681c      	ldr	r4, [r3, #0]
 800217a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10f      	bne.n	80021a0 <rand+0x2c>
 8002180:	2018      	movs	r0, #24
 8002182:	f000 f829 	bl	80021d8 <malloc>
 8002186:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <rand+0x50>)
 8002188:	63a0      	str	r0, [r4, #56]	; 0x38
 800218a:	6003      	str	r3, [r0, #0]
 800218c:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <rand+0x54>)
 800218e:	2201      	movs	r2, #1
 8002190:	6043      	str	r3, [r0, #4]
 8002192:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <rand+0x58>)
 8002194:	6083      	str	r3, [r0, #8]
 8002196:	230b      	movs	r3, #11
 8002198:	8183      	strh	r3, [r0, #12]
 800219a:	2300      	movs	r3, #0
 800219c:	6102      	str	r2, [r0, #16]
 800219e:	6143      	str	r3, [r0, #20]
 80021a0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80021a2:	4a0b      	ldr	r2, [pc, #44]	; (80021d0 <rand+0x5c>)
 80021a4:	6920      	ldr	r0, [r4, #16]
 80021a6:	6961      	ldr	r1, [r4, #20]
 80021a8:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <rand+0x60>)
 80021aa:	f7fe f835 	bl	8000218 <__aeabi_lmul>
 80021ae:	2201      	movs	r2, #1
 80021b0:	2300      	movs	r3, #0
 80021b2:	1880      	adds	r0, r0, r2
 80021b4:	4159      	adcs	r1, r3
 80021b6:	6120      	str	r0, [r4, #16]
 80021b8:	6161      	str	r1, [r4, #20]
 80021ba:	0048      	lsls	r0, r1, #1
 80021bc:	0840      	lsrs	r0, r0, #1
 80021be:	bd10      	pop	{r4, pc}
 80021c0:	20000010 	.word	0x20000010
 80021c4:	abcd330e 	.word	0xabcd330e
 80021c8:	e66d1234 	.word	0xe66d1234
 80021cc:	0005deec 	.word	0x0005deec
 80021d0:	4c957f2d 	.word	0x4c957f2d
 80021d4:	5851f42d 	.word	0x5851f42d

080021d8 <malloc>:
 80021d8:	b510      	push	{r4, lr}
 80021da:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <malloc+0x10>)
 80021dc:	0001      	movs	r1, r0
 80021de:	6818      	ldr	r0, [r3, #0]
 80021e0:	f000 f804 	bl	80021ec <_malloc_r>
 80021e4:	bd10      	pop	{r4, pc}
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	20000010 	.word	0x20000010

080021ec <_malloc_r>:
 80021ec:	2303      	movs	r3, #3
 80021ee:	b570      	push	{r4, r5, r6, lr}
 80021f0:	1ccd      	adds	r5, r1, #3
 80021f2:	439d      	bics	r5, r3
 80021f4:	3508      	adds	r5, #8
 80021f6:	0006      	movs	r6, r0
 80021f8:	2d0c      	cmp	r5, #12
 80021fa:	d21e      	bcs.n	800223a <_malloc_r+0x4e>
 80021fc:	250c      	movs	r5, #12
 80021fe:	42a9      	cmp	r1, r5
 8002200:	d81d      	bhi.n	800223e <_malloc_r+0x52>
 8002202:	0030      	movs	r0, r6
 8002204:	f000 f862 	bl	80022cc <__malloc_lock>
 8002208:	4a25      	ldr	r2, [pc, #148]	; (80022a0 <_malloc_r+0xb4>)
 800220a:	6814      	ldr	r4, [r2, #0]
 800220c:	0021      	movs	r1, r4
 800220e:	2900      	cmp	r1, #0
 8002210:	d119      	bne.n	8002246 <_malloc_r+0x5a>
 8002212:	4c24      	ldr	r4, [pc, #144]	; (80022a4 <_malloc_r+0xb8>)
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d103      	bne.n	8002222 <_malloc_r+0x36>
 800221a:	0030      	movs	r0, r6
 800221c:	f000 f844 	bl	80022a8 <_sbrk_r>
 8002220:	6020      	str	r0, [r4, #0]
 8002222:	0029      	movs	r1, r5
 8002224:	0030      	movs	r0, r6
 8002226:	f000 f83f 	bl	80022a8 <_sbrk_r>
 800222a:	1c43      	adds	r3, r0, #1
 800222c:	d12b      	bne.n	8002286 <_malloc_r+0x9a>
 800222e:	230c      	movs	r3, #12
 8002230:	0030      	movs	r0, r6
 8002232:	6033      	str	r3, [r6, #0]
 8002234:	f000 f84b 	bl	80022ce <__malloc_unlock>
 8002238:	e003      	b.n	8002242 <_malloc_r+0x56>
 800223a:	2d00      	cmp	r5, #0
 800223c:	dadf      	bge.n	80021fe <_malloc_r+0x12>
 800223e:	230c      	movs	r3, #12
 8002240:	6033      	str	r3, [r6, #0]
 8002242:	2000      	movs	r0, #0
 8002244:	bd70      	pop	{r4, r5, r6, pc}
 8002246:	680b      	ldr	r3, [r1, #0]
 8002248:	1b5b      	subs	r3, r3, r5
 800224a:	d419      	bmi.n	8002280 <_malloc_r+0x94>
 800224c:	2b0b      	cmp	r3, #11
 800224e:	d903      	bls.n	8002258 <_malloc_r+0x6c>
 8002250:	600b      	str	r3, [r1, #0]
 8002252:	18cc      	adds	r4, r1, r3
 8002254:	6025      	str	r5, [r4, #0]
 8002256:	e003      	b.n	8002260 <_malloc_r+0x74>
 8002258:	684b      	ldr	r3, [r1, #4]
 800225a:	428c      	cmp	r4, r1
 800225c:	d10d      	bne.n	800227a <_malloc_r+0x8e>
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	0030      	movs	r0, r6
 8002262:	f000 f834 	bl	80022ce <__malloc_unlock>
 8002266:	0020      	movs	r0, r4
 8002268:	2207      	movs	r2, #7
 800226a:	300b      	adds	r0, #11
 800226c:	1d23      	adds	r3, r4, #4
 800226e:	4390      	bics	r0, r2
 8002270:	1ac3      	subs	r3, r0, r3
 8002272:	d0e7      	beq.n	8002244 <_malloc_r+0x58>
 8002274:	425a      	negs	r2, r3
 8002276:	50e2      	str	r2, [r4, r3]
 8002278:	e7e4      	b.n	8002244 <_malloc_r+0x58>
 800227a:	6063      	str	r3, [r4, #4]
 800227c:	000c      	movs	r4, r1
 800227e:	e7ef      	b.n	8002260 <_malloc_r+0x74>
 8002280:	000c      	movs	r4, r1
 8002282:	6849      	ldr	r1, [r1, #4]
 8002284:	e7c3      	b.n	800220e <_malloc_r+0x22>
 8002286:	2303      	movs	r3, #3
 8002288:	1cc4      	adds	r4, r0, #3
 800228a:	439c      	bics	r4, r3
 800228c:	42a0      	cmp	r0, r4
 800228e:	d0e1      	beq.n	8002254 <_malloc_r+0x68>
 8002290:	1a21      	subs	r1, r4, r0
 8002292:	0030      	movs	r0, r6
 8002294:	f000 f808 	bl	80022a8 <_sbrk_r>
 8002298:	1c43      	adds	r3, r0, #1
 800229a:	d1db      	bne.n	8002254 <_malloc_r+0x68>
 800229c:	e7c7      	b.n	800222e <_malloc_r+0x42>
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	200000a4 	.word	0x200000a4
 80022a4:	200000a8 	.word	0x200000a8

080022a8 <_sbrk_r>:
 80022a8:	2300      	movs	r3, #0
 80022aa:	b570      	push	{r4, r5, r6, lr}
 80022ac:	4c06      	ldr	r4, [pc, #24]	; (80022c8 <_sbrk_r+0x20>)
 80022ae:	0005      	movs	r5, r0
 80022b0:	0008      	movs	r0, r1
 80022b2:	6023      	str	r3, [r4, #0]
 80022b4:	f7fe fbca 	bl	8000a4c <_sbrk>
 80022b8:	1c43      	adds	r3, r0, #1
 80022ba:	d103      	bne.n	80022c4 <_sbrk_r+0x1c>
 80022bc:	6823      	ldr	r3, [r4, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d000      	beq.n	80022c4 <_sbrk_r+0x1c>
 80022c2:	602b      	str	r3, [r5, #0]
 80022c4:	bd70      	pop	{r4, r5, r6, pc}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	200000f4 	.word	0x200000f4

080022cc <__malloc_lock>:
 80022cc:	4770      	bx	lr

080022ce <__malloc_unlock>:
 80022ce:	4770      	bx	lr

080022d0 <_init>:
 80022d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022d6:	bc08      	pop	{r3}
 80022d8:	469e      	mov	lr, r3
 80022da:	4770      	bx	lr

080022dc <_fini>:
 80022dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022e2:	bc08      	pop	{r3}
 80022e4:	469e      	mov	lr, r3
 80022e6:	4770      	bx	lr
